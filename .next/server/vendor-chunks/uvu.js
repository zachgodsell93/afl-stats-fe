"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uvu";
exports.ids = ["vendor-chunks/uvu"];
exports.modules = {

/***/ "(rsc)/./node_modules/uvu/assert/index.mjs":
/*!*******************************************!*\
  !*** ./node_modules/uvu/assert/index.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assertion: () => (/* binding */ Assertion),\n/* harmony export */   equal: () => (/* binding */ equal),\n/* harmony export */   fixture: () => (/* binding */ fixture),\n/* harmony export */   instance: () => (/* binding */ instance),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   not: () => (/* binding */ not),\n/* harmony export */   ok: () => (/* binding */ ok),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   throws: () => (/* binding */ throws),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   unreachable: () => (/* binding */ unreachable)\n/* harmony export */ });\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ \"(rsc)/./node_modules/dequal/dist/index.mjs\");\n/* harmony import */ var uvu_diff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uvu/diff */ \"(rsc)/./node_modules/uvu/diff/index.mjs\");\n\n\nfunction dedent(str) {\n    str = str.replace(/\\r?\\n/g, \"\\n\");\n    let arr = str.match(/^[ \\t]*(?=\\S)/gm);\n    let i = 0, min = 1 / 0, len = (arr || []).length;\n    for(; i < len; i++)min = Math.min(min, arr[i].length);\n    return len && min ? str.replace(new RegExp(`^[ \\\\t]{${min}}`, \"gm\"), \"\") : str;\n}\nclass Assertion extends Error {\n    constructor(opts = {}){\n        super(opts.message);\n        this.name = \"Assertion\";\n        this.code = \"ERR_ASSERTION\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this.details = opts.details || false;\n        this.generated = !!opts.generated;\n        this.operator = opts.operator;\n        this.expects = opts.expects;\n        this.actual = opts.actual;\n    }\n}\nfunction assert(bool, actual, expects, operator, detailer, backup, msg) {\n    if (bool) return;\n    let message = msg || backup;\n    if (msg instanceof Error) throw msg;\n    let details = detailer && detailer(actual, expects);\n    throw new Assertion({\n        actual,\n        expects,\n        operator,\n        message,\n        details,\n        generated: !msg\n    });\n}\nfunction ok(val, msg) {\n    assert(!!val, false, true, \"ok\", false, \"Expected value to be truthy\", msg);\n}\nfunction is(val, exp, msg) {\n    assert(val === exp, val, exp, \"is\", uvu_diff__WEBPACK_IMPORTED_MODULE_1__.compare, \"Expected values to be strictly equal:\", msg);\n}\nfunction equal(val, exp, msg) {\n    assert((0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(val, exp), val, exp, \"equal\", uvu_diff__WEBPACK_IMPORTED_MODULE_1__.compare, \"Expected values to be deeply equal:\", msg);\n}\nfunction unreachable(msg) {\n    assert(false, true, false, \"unreachable\", false, \"Expected not to be reached!\", msg);\n}\nfunction type(val, exp, msg) {\n    let tmp = typeof val;\n    assert(tmp === exp, tmp, exp, \"type\", false, `Expected \"${tmp}\" to be \"${exp}\"`, msg);\n}\nfunction instance(val, exp, msg) {\n    let name = \"`\" + (exp.name || exp.constructor.name) + \"`\";\n    assert(val instanceof exp, val, exp, \"instance\", false, `Expected value to be an instance of ${name}`, msg);\n}\nfunction match(val, exp, msg) {\n    if (typeof exp === \"string\") {\n        assert(val.includes(exp), val, exp, \"match\", false, `Expected value to include \"${exp}\" substring`, msg);\n    } else {\n        assert(exp.test(val), val, exp, \"match\", false, `Expected value to match \\`${String(exp)}\\` pattern`, msg);\n    }\n}\nfunction snapshot(val, exp, msg) {\n    val = dedent(val);\n    exp = dedent(exp);\n    assert(val === exp, val, exp, \"snapshot\", uvu_diff__WEBPACK_IMPORTED_MODULE_1__.lines, \"Expected value to match snapshot:\", msg);\n}\nconst lineNums = (x, y)=>(0,uvu_diff__WEBPACK_IMPORTED_MODULE_1__.lines)(x, y, 1);\nfunction fixture(val, exp, msg) {\n    val = dedent(val);\n    exp = dedent(exp);\n    assert(val === exp, val, exp, \"fixture\", lineNums, \"Expected value to match fixture:\", msg);\n}\nfunction throws(blk, exp, msg) {\n    if (!msg && typeof exp === \"string\") {\n        msg = exp;\n        exp = null;\n    }\n    try {\n        blk();\n        assert(false, false, true, \"throws\", false, \"Expected function to throw\", msg);\n    } catch (err) {\n        if (err instanceof Assertion) throw err;\n        if (typeof exp === \"function\") {\n            assert(exp(err), false, true, \"throws\", false, \"Expected function to throw matching exception\", msg);\n        } else if (exp instanceof RegExp) {\n            assert(exp.test(err.message), false, true, \"throws\", false, `Expected function to throw exception matching \\`${String(exp)}\\` pattern`, msg);\n        }\n    }\n}\n// ---\nfunction not(val, msg) {\n    assert(!val, true, false, \"not\", false, \"Expected value to be falsey\", msg);\n}\nnot.ok = not;\nis.not = function(val, exp, msg) {\n    assert(val !== exp, val, exp, \"is.not\", false, \"Expected values not to be strictly equal\", msg);\n};\nnot.equal = function(val, exp, msg) {\n    assert(!(0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(val, exp), val, exp, \"not.equal\", false, \"Expected values not to be deeply equal\", msg);\n};\nnot.type = function(val, exp, msg) {\n    let tmp = typeof val;\n    assert(tmp !== exp, tmp, exp, \"not.type\", false, `Expected \"${tmp}\" not to be \"${exp}\"`, msg);\n};\nnot.instance = function(val, exp, msg) {\n    let name = \"`\" + (exp.name || exp.constructor.name) + \"`\";\n    assert(!(val instanceof exp), val, exp, \"not.instance\", false, `Expected value not to be an instance of ${name}`, msg);\n};\nnot.snapshot = function(val, exp, msg) {\n    val = dedent(val);\n    exp = dedent(exp);\n    assert(val !== exp, val, exp, \"not.snapshot\", false, \"Expected value not to match snapshot\", msg);\n};\nnot.fixture = function(val, exp, msg) {\n    val = dedent(val);\n    exp = dedent(exp);\n    assert(val !== exp, val, exp, \"not.fixture\", false, \"Expected value not to match fixture\", msg);\n};\nnot.match = function(val, exp, msg) {\n    if (typeof exp === \"string\") {\n        assert(!val.includes(exp), val, exp, \"not.match\", false, `Expected value not to include \"${exp}\" substring`, msg);\n    } else {\n        assert(!exp.test(val), val, exp, \"not.match\", false, `Expected value not to match \\`${String(exp)}\\` pattern`, msg);\n    }\n};\nnot.throws = function(blk, exp, msg) {\n    if (!msg && typeof exp === \"string\") {\n        msg = exp;\n        exp = null;\n    }\n    try {\n        blk();\n    } catch (err) {\n        if (typeof exp === \"function\") {\n            assert(!exp(err), true, false, \"not.throws\", false, \"Expected function not to throw matching exception\", msg);\n        } else if (exp instanceof RegExp) {\n            assert(!exp.test(err.message), true, false, \"not.throws\", false, `Expected function not to throw exception matching \\`${String(exp)}\\` pattern`, msg);\n        } else if (!exp) {\n            assert(false, true, false, \"not.throws\", false, \"Expected function not to throw\", msg);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXZ1L2Fzc2VydC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0M7QUFDVTtBQUUxQyxTQUFTRyxPQUFPQyxHQUFHO0lBQ2xCQSxNQUFNQSxJQUFJQyxPQUFPLENBQUMsVUFBVTtJQUMzQixJQUFJQyxNQUFNRixJQUFJRyxLQUFLLENBQUM7SUFDcEIsSUFBSUMsSUFBSSxHQUFHQyxNQUFNLElBQUUsR0FBR0MsTUFBTSxDQUFDSixPQUFLLEVBQUUsRUFBRUssTUFBTTtJQUM1QyxNQUFPSCxJQUFJRSxLQUFLRixJQUFLQyxNQUFNRyxLQUFLSCxHQUFHLENBQUNBLEtBQUtILEdBQUcsQ0FBQ0UsRUFBRSxDQUFDRyxNQUFNO0lBQ3RELE9BQU9ELE9BQU9ELE1BQU1MLElBQUlDLE9BQU8sQ0FBQyxJQUFJUSxPQUFPLENBQUMsUUFBUSxFQUFFSixJQUFJLENBQUMsQ0FBQyxFQUFFLE9BQU8sTUFBTUw7QUFDN0U7QUFFTyxNQUFNVSxrQkFBa0JDO0lBQzlCQyxZQUFZQyxPQUFLLENBQUMsQ0FBQyxDQUFFO1FBQ3BCLEtBQUssQ0FBQ0EsS0FBS0MsT0FBTztRQUNsQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSUwsTUFBTU0saUJBQWlCLEVBQUU7WUFDNUJOLE1BQU1NLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNMLFdBQVc7UUFDL0M7UUFDQSxJQUFJLENBQUNNLE9BQU8sR0FBR0wsS0FBS0ssT0FBTyxJQUFJO1FBQy9CLElBQUksQ0FBQ0MsU0FBUyxHQUFHLENBQUMsQ0FBQ04sS0FBS00sU0FBUztRQUNqQyxJQUFJLENBQUNDLFFBQVEsR0FBR1AsS0FBS08sUUFBUTtRQUM3QixJQUFJLENBQUNDLE9BQU8sR0FBR1IsS0FBS1EsT0FBTztRQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBR1QsS0FBS1MsTUFBTTtJQUMxQjtBQUNEO0FBRUEs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RUFBRUo7SUFDaEg7QUFDRDtBQUVBcUIsSUFBSUgsTUFBTSxHQUFHLFNBQVVDLEdBQUcsRUFBRWYsR0FBRyxFQUFFSixHQUFHO0lBQ25DLElBQUksQ0FBQ0EsT0FBTyxPQUFPSSxRQUFRLFVBQVU7UUFDcENKLE1BQU1JO1FBQUtBLE1BQU07SUFDbEI7SUFFQSxJQUFJO1FBQ0hlO0lBQ0QsRUFBRSxPQUFPQyxLQUFLO1FBQ2IsSUFBSSxPQUFPaEIsUUFBUSxZQUFZO1lBQzlCUixPQUFPLENBQUNRLElBQUlnQixNQUFNLE1BQU0sT0FBTyxjQUFjLE9BQU8scURBQXFEcEI7UUFDMUcsT0FBTyxJQUFJSSxlQUFldEIsUUFBUTtZQUNqQ2MsT0FBTyxDQUFDUSxJQUFJTyxJQUFJLENBQUNTLElBQUlqQyxPQUFPLEdBQUcsTUFBTSxPQUFPLGNBQWMsT0FBTyxDQUFDLG9EQUFvRCxFQUFFeUIsT0FBT1IsS0FBSyxVQUFVLENBQUMsRUFBRUo7UUFDbEosT0FBTyxJQUFJLENBQUNJLEtBQUs7WUFDaEJSLE9BQU8sT0FBTyxNQUFNLE9BQU8sY0FBYyxPQUFPLGtDQUFrQ0k7UUFDbkY7SUFDRDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF4b25vbXkvLi9ub2RlX21vZHVsZXMvdXZ1L2Fzc2VydC9pbmRleC5tanM/MjA1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXF1YWzCoH0gZnJvbSAnZGVxdWFsJztcbmltcG9ydCB7IGNvbXBhcmUsIGxpbmVzIH0gZnJvbSAndXZ1L2RpZmYnO1xuXG5mdW5jdGlvbiBkZWRlbnQoc3RyKSB7XG5cdHN0ciA9IHN0ci5yZXBsYWNlKC9cXHI/XFxuL2csICdcXG4nKTtcbiAgbGV0IGFyciA9IHN0ci5tYXRjaCgvXlsgXFx0XSooPz1cXFMpL2dtKTtcbiAgbGV0IGkgPSAwLCBtaW4gPSAxLzAsIGxlbiA9IChhcnJ8fFtdKS5sZW5ndGg7XG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIG1pbiA9IE1hdGgubWluKG1pbiwgYXJyW2ldLmxlbmd0aCk7XG4gIHJldHVybiBsZW4gJiYgbWluID8gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChgXlsgXFxcXHRdeyR7bWlufX1gLCAnZ20nKSwgJycpIDogc3RyO1xufVxuXG5leHBvcnQgY2xhc3MgQXNzZXJ0aW9uIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG5cdFx0c3VwZXIob3B0cy5tZXNzYWdlKTtcblx0XHR0aGlzLm5hbWUgPSAnQXNzZXJ0aW9uJztcblx0XHR0aGlzLmNvZGUgPSAnRVJSX0FTU0VSVElPTic7XG5cdFx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG5cdFx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcblx0XHR9XG5cdFx0dGhpcy5kZXRhaWxzID0gb3B0cy5kZXRhaWxzIHx8IGZhbHNlO1xuXHRcdHRoaXMuZ2VuZXJhdGVkID0gISFvcHRzLmdlbmVyYXRlZDtcblx0XHR0aGlzLm9wZXJhdG9yID0gb3B0cy5vcGVyYXRvcjtcblx0XHR0aGlzLmV4cGVjdHMgPSBvcHRzLmV4cGVjdHM7XG5cdFx0dGhpcy5hY3R1YWwgPSBvcHRzLmFjdHVhbDtcblx0fVxufVxuXG5mdW5jdGlvbiBhc3NlcnQoYm9vbCwgYWN0dWFsLCBleHBlY3RzLCBvcGVyYXRvciwgZGV0YWlsZXIsIGJhY2t1cCwgbXNnKSB7XG5cdGlmIChib29sKSByZXR1cm47XG5cdGxldCBtZXNzYWdlID0gbXNnIHx8IGJhY2t1cDtcblx0aWYgKG1zZyBpbnN0YW5jZW9mIEVycm9yKSB0aHJvdyBtc2c7XG5cdGxldCBkZXRhaWxzID0gZGV0YWlsZXIgJiYgZGV0YWlsZXIoYWN0dWFsLCBleHBlY3RzKTtcblx0dGhyb3cgbmV3IEFzc2VydGlvbih7IGFjdHVhbCwgZXhwZWN0cywgb3BlcmF0b3IsIG1lc3NhZ2UsIGRldGFpbHMsIGdlbmVyYXRlZDogIW1zZyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9rKHZhbCwgbXNnKSB7XG5cdGFzc2VydCghIXZhbCwgZmFsc2UsIHRydWUsICdvaycsIGZhbHNlLCAnRXhwZWN0ZWQgdmFsdWUgdG8gYmUgdHJ1dGh5JywgbXNnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzKHZhbCwgZXhwLCBtc2cpIHtcblx0YXNzZXJ0KHZhbCA9PT0gZXhwLCB2YWwsIGV4cCwgJ2lzJywgY29tcGFyZSwgJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBzdHJpY3RseSBlcXVhbDonLCBtc2cpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWwodmFsLCBleHAsIG1zZykge1xuXHRhc3NlcnQoZGVxdWFsKHZhbCwgZXhwKSwgdmFsLCBleHAsICdlcXVhbCcsIGNvbXBhcmUsICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgZGVlcGx5IGVxdWFsOicsIG1zZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnJlYWNoYWJsZShtc2cpIHtcblx0YXNzZXJ0KGZhbHNlLCB0cnVlLCBmYWxzZSwgJ3VucmVhY2hhYmxlJywgZmFsc2UsICdFeHBlY3RlZCBub3QgdG8gYmUgcmVhY2hlZCEnLCBtc2cpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHlwZSh2YWwsIGV4cCwgbXNnKSB7XG5cdGxldCB0bXAgPSB0eXBlb2YgdmFsO1xuXHRhc3NlcnQodG1wID09PSBleHAsIHRtcCwgZXhwLCAndHlwZScsIGZhbHNlLCBgRXhwZWN0ZWQgXCIke3RtcH1cIiB0byBiZSBcIiR7ZXhwfVwiYCwgbXNnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbmNlKHZhbCwgZXhwLCBtc2cpIHtcblx0bGV0IG5hbWUgPSAnYCcgKyAoZXhwLm5hbWUgfHwgZXhwLmNvbnN0cnVjdG9yLm5hbWUpICsgJ2AnO1xuXHRhc3NlcnQodmFsIGluc3RhbmNlb2YgZXhwLCB2YWwsIGV4cCwgJ2luc3RhbmNlJywgZmFsc2UsIGBFeHBlY3RlZCB2YWx1ZSB0byBiZSBhbiBpbnN0YW5jZSBvZiAke25hbWV9YCwgbXNnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoKHZhbCwgZXhwLCBtc2cpIHtcblx0aWYgKHR5cGVvZiBleHAgPT09ICdzdHJpbmcnKSB7XG5cdFx0YXNzZXJ0KHZhbC5pbmNsdWRlcyhleHApLCB2YWwsIGV4cCwgJ21hdGNoJywgZmFsc2UsIGBFeHBlY3RlZCB2YWx1ZSB0byBpbmNsdWRlIFwiJHtleHB9XCIgc3Vic3RyaW5nYCwgbXNnKTtcblx0fSBlbHNlIHtcblx0XHRhc3NlcnQoZXhwLnRlc3QodmFsKSwgdmFsLCBleHAsICdtYXRjaCcsIGZhbHNlLCBgRXhwZWN0ZWQgdmFsdWUgdG8gbWF0Y2ggXFxgJHtTdHJpbmcoZXhwKX1cXGAgcGF0dGVybmAsIG1zZyk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNuYXBzaG90KHZhbCwgZXhwLCBtc2cpIHtcblx0dmFsPWRlZGVudCh2YWwpOyBleHA9ZGVkZW50KGV4cCk7XG5cdGFzc2VydCh2YWwgPT09IGV4cCwgdmFsLCBleHAsICdzbmFwc2hvdCcsIGxpbmVzLCAnRXhwZWN0ZWQgdmFsdWUgdG8gbWF0Y2ggc25hcHNob3Q6JywgbXNnKTtcbn1cblxuY29uc3QgbGluZU51bXMgPSAoeCwgeSkgPT4gbGluZXMoeCwgeSwgMSk7XG5leHBvcnQgZnVuY3Rpb24gZml4dHVyZSh2YWwsIGV4cCwgbXNnKSB7XG5cdHZhbD1kZWRlbnQodmFsKTsgZXhwPWRlZGVudChleHApO1xuXHRhc3NlcnQodmFsID09PSBleHAsIHZhbCwgZXhwLCAnZml4dHVyZScsIGxpbmVOdW1zLCAnRXhwZWN0ZWQgdmFsdWUgdG8gbWF0Y2ggZml4dHVyZTonLCBtc2cpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dzKGJsaywgZXhwLCBtc2cpIHtcblx0aWYgKCFtc2cgJiYgdHlwZW9mIGV4cCA9PT0gJ3N0cmluZycpIHtcblx0XHRtc2cgPSBleHA7IGV4cCA9IG51bGw7XG5cdH1cblxuXHR0cnkge1xuXHRcdGJsaygpO1xuXHRcdGFzc2VydChmYWxzZSwgZmFsc2UsIHRydWUsICd0aHJvd3MnLCBmYWxzZSwgJ0V4cGVjdGVkIGZ1bmN0aW9uIHRvIHRocm93JywgbXNnKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0aWYgKGVyciBpbnN0YW5jZW9mIEFzc2VydGlvbikgdGhyb3cgZXJyO1xuXG5cdFx0aWYgKHR5cGVvZiBleHAgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGFzc2VydChleHAoZXJyKSwgZmFsc2UsIHRydWUsICd0aHJvd3MnLCBmYWxzZSwgJ0V4cGVjdGVkIGZ1bmN0aW9uIHRvIHRocm93IG1hdGNoaW5nIGV4Y2VwdGlvbicsIG1zZyk7XG5cdFx0fSBlbHNlIGlmIChleHAgaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0XHRcdGFzc2VydChleHAudGVzdChlcnIubWVzc2FnZSksIGZhbHNlLCB0cnVlLCAndGhyb3dzJywgZmFsc2UsIGBFeHBlY3RlZCBmdW5jdGlvbiB0byB0aHJvdyBleGNlcHRpb24gbWF0Y2hpbmcgXFxgJHtTdHJpbmcoZXhwKX1cXGAgcGF0dGVybmAsIG1zZyk7XG5cdFx0fVxuXHR9XG59XG5cbi8vIC0tLVxuXG5leHBvcnQgZnVuY3Rpb24gbm90KHZhbCwgbXNnKSB7XG5cdGFzc2VydCghdmFsLCB0cnVlLCBmYWxzZSwgJ25vdCcsIGZhbHNlLCAnRXhwZWN0ZWQgdmFsdWUgdG8gYmUgZmFsc2V5JywgbXNnKTtcbn1cblxubm90Lm9rID0gbm90O1xuXG5pcy5ub3QgPSBmdW5jdGlvbiAodmFsLCBleHAsIG1zZykge1xuXHRhc3NlcnQodmFsICE9PSBleHAsIHZhbCwgZXhwLCAnaXMubm90JywgZmFsc2UsICdFeHBlY3RlZCB2YWx1ZXMgbm90IHRvIGJlIHN0cmljdGx5IGVxdWFsJywgbXNnKTtcbn1cblxubm90LmVxdWFsID0gZnVuY3Rpb24gKHZhbCwgZXhwLCBtc2cpIHtcblx0YXNzZXJ0KCFkZXF1YWwodmFsLCBleHApLCB2YWwsIGV4cCwgJ25vdC5lcXVhbCcsIGZhbHNlLCAnRXhwZWN0ZWQgdmFsdWVzIG5vdCB0byBiZSBkZWVwbHkgZXF1YWwnLCBtc2cpO1xufVxuXG5ub3QudHlwZSA9IGZ1bmN0aW9uICh2YWwsIGV4cCwgbXNnKSB7XG5cdGxldCB0bXAgPSB0eXBlb2YgdmFsO1xuXHRhc3NlcnQodG1wICE9PSBleHAsIHRtcCwgZXhwLCAnbm90LnR5cGUnLCBmYWxzZSwgYEV4cGVjdGVkIFwiJHt0bXB9XCIgbm90IHRvIGJlIFwiJHtleHB9XCJgLCBtc2cpO1xufVxuXG5ub3QuaW5zdGFuY2UgPSBmdW5jdGlvbiAodmFsLCBleHAsIG1zZykge1xuXHRsZXQgbmFtZSA9ICdgJyArIChleHAubmFtZSB8fCBleHAuY29uc3RydWN0b3IubmFtZSkgKyAnYCc7XG5cdGFzc2VydCghKHZhbCBpbnN0YW5jZW9mIGV4cCksIHZhbCwgZXhwLCAnbm90Lmluc3RhbmNlJywgZmFsc2UsIGBFeHBlY3RlZCB2YWx1ZSBub3QgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgJHtuYW1lfWAsIG1zZyk7XG59XG5cbm5vdC5zbmFwc2hvdCA9IGZ1bmN0aW9uICh2YWwsIGV4cCwgbXNnKSB7XG5cdHZhbD1kZWRlbnQodmFsKTsgZXhwPWRlZGVudChleHApO1xuXHRhc3NlcnQodmFsICE9PSBleHAsIHZhbCwgZXhwLCAnbm90LnNuYXBzaG90JywgZmFsc2UsICdFeHBlY3RlZCB2YWx1ZSBub3QgdG8gbWF0Y2ggc25hcHNob3QnLCBtc2cpO1xufVxuXG5ub3QuZml4dHVyZSA9IGZ1bmN0aW9uICh2YWwsIGV4cCwgbXNnKSB7XG5cdHZhbD1kZWRlbnQodmFsKTsgZXhwPWRlZGVudChleHApO1xuXHRhc3NlcnQodmFsICE9PSBleHAsIHZhbCwgZXhwLCAnbm90LmZpeHR1cmUnLCBmYWxzZSwgJ0V4cGVjdGVkIHZhbHVlIG5vdCB0byBtYXRjaCBmaXh0dXJlJywgbXNnKTtcbn1cblxubm90Lm1hdGNoID0gZnVuY3Rpb24gKHZhbCwgZXhwLCBtc2cpIHtcblx0aWYgKHR5cGVvZiBleHAgPT09ICdzdHJpbmcnKSB7XG5cdFx0YXNzZXJ0KCF2YWwuaW5jbHVkZXMoZXhwKSwgdmFsLCBleHAsICdub3QubWF0Y2gnLCBmYWxzZSwgYEV4cGVjdGVkIHZhbHVlIG5vdCB0byBpbmNsdWRlIFwiJHtleHB9XCIgc3Vic3RyaW5nYCwgbXNnKTtcblx0fSBlbHNlIHtcblx0XHRhc3NlcnQoIWV4cC50ZXN0KHZhbCksIHZhbCwgZXhwLCAnbm90Lm1hdGNoJywgZmFsc2UsIGBFeHBlY3RlZCB2YWx1ZSBub3QgdG8gbWF0Y2ggXFxgJHtTdHJpbmcoZXhwKX1cXGAgcGF0dGVybmAsIG1zZyk7XG5cdH1cbn1cblxubm90LnRocm93cyA9IGZ1bmN0aW9uIChibGssIGV4cCwgbXNnKSB7XG5cdGlmICghbXNnICYmIHR5cGVvZiBleHAgPT09ICdzdHJpbmcnKSB7XG5cdFx0bXNnID0gZXhwOyBleHAgPSBudWxsO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRibGsoKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0aWYgKHR5cGVvZiBleHAgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGFzc2VydCghZXhwKGVyciksIHRydWUsIGZhbHNlLCAnbm90LnRocm93cycsIGZhbHNlLCAnRXhwZWN0ZWQgZnVuY3Rpb24gbm90IHRvIHRocm93IG1hdGNoaW5nIGV4Y2VwdGlvbicsIG1zZyk7XG5cdFx0fSBlbHNlIGlmIChleHAgaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0XHRcdGFzc2VydCghZXhwLnRlc3QoZXJyLm1lc3NhZ2UpLCB0cnVlLCBmYWxzZSwgJ25vdC50aHJvd3MnLCBmYWxzZSwgYEV4cGVjdGVkIGZ1bmN0aW9uIG5vdCB0byB0aHJvdyBleGNlcHRpb24gbWF0Y2hpbmcgXFxgJHtTdHJpbmcoZXhwKX1cXGAgcGF0dGVybmAsIG1zZyk7XG5cdFx0fSBlbHNlIGlmICghZXhwKSB7XG5cdFx0XHRhc3NlcnQoZmFsc2UsIHRydWUsIGZhbHNlLCAnbm90LnRocm93cycsIGZhbHNlLCAnRXhwZWN0ZWQgZnVuY3Rpb24gbm90IHRvIHRocm93JywgbXNnKTtcblx0XHR9XG5cdH1cbn1cbiJdLCJuYW1lcyI6WyJkZXF1YWwiLCJjb21wYXJlIiwibGluZXMiLCJkZWRlbnQiLCJzdHIiLCJyZXBsYWNlIiwiYXJyIiwibWF0Y2giLCJpIiwibWluIiwibGVuIiwibGVuZ3RoIiwiTWF0aCIsIlJlZ0V4cCIsIkFzc2VydGlvbiIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJvcHRzIiwibWVzc2FnZSIsIm5hbWUiLCJjb2RlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJkZXRhaWxzIiwiZ2VuZXJhdGVkIiwib3BlcmF0b3IiLCJleHBlY3RzIiwiYWN0dWFsIiwiYXNzZXJ0IiwiYm9vbCIsImRldGFpbGVyIiwiYmFja3VwIiwibXNnIiwib2siLCJ2YWwiLCJpcyIsImV4cCIsImVxdWFsIiwidW5yZWFjaGFibGUiLCJ0eXBlIiwidG1wIiwiaW5zdGFuY2UiLCJpbmNsdWRlcyIsInRlc3QiLCJTdHJpbmciLCJzbmFwc2hvdCIsImxpbmVOdW1zIiwieCIsInkiLCJmaXh0dXJlIiwidGhyb3dzIiwiYmxrIiwiZXJyIiwibm90Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uvu/assert/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uvu/diff/index.mjs":
/*!*****************************************!*\
  !*** ./node_modules/uvu/diff/index.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrays: () => (/* binding */ arrays),\n/* harmony export */   chars: () => (/* binding */ chars),\n/* harmony export */   circular: () => (/* binding */ circular),\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   direct: () => (/* binding */ direct),\n/* harmony export */   lines: () => (/* binding */ lines),\n/* harmony export */   sort: () => (/* binding */ sort),\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var kleur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kleur */ \"(rsc)/./node_modules/kleur/index.mjs\");\n/* harmony import */ var diff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! diff */ \"(rsc)/./node_modules/uvu/node_modules/diff/lib/index.mjs\");\n\n\nconst colors = {\n    \"--\": kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].red,\n    \"\\xb7\\xb7\": kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].grey,\n    \"++\": kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].green\n};\nconst TITLE = kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dim().italic;\nconst TAB = kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dim(\"→\"), SPACE = kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dim(\"\\xb7\"), NL = kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dim(\"↵\");\nconst LOG = (sym, str)=>colors[sym](sym + PRETTY(str)) + \"\\n\";\nconst LINE = (num, x)=>kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dim(\"L\" + String(num).padStart(x, \"0\") + \" \");\nconst PRETTY = (str)=>str.replace(/[ ]/g, SPACE).replace(/\\t/g, TAB).replace(/(\\r?\\n)/g, NL);\nfunction line(obj, prev, pad) {\n    let char = obj.removed ? \"--\" : obj.added ? \"++\" : \"\\xb7\\xb7\";\n    let arr = obj.value.replace(/\\r?\\n$/, \"\").split(\"\\n\");\n    let i = 0, tmp, out = \"\";\n    if (obj.added) out += colors[char]().underline(TITLE(\"Expected:\")) + \"\\n\";\n    else if (obj.removed) out += colors[char]().underline(TITLE(\"Actual:\")) + \"\\n\";\n    for(; i < arr.length; i++){\n        tmp = arr[i];\n        if (tmp != null) {\n            if (prev) out += LINE(prev + i, pad);\n            out += LOG(char, tmp || \"\\n\");\n        }\n    }\n    return out;\n}\n// TODO: want better diffing\n//~> complex items bail outright\nfunction arrays(input, expect) {\n    let arr = diff__WEBPACK_IMPORTED_MODULE_1__.diffArrays(input, expect);\n    let i = 0, j = 0, k = 0, tmp, val, char, isObj, str;\n    let out = LOG(\"\\xb7\\xb7\", \"[\");\n    for(; i < arr.length; i++){\n        char = (tmp = arr[i]).removed ? \"--\" : tmp.added ? \"++\" : \"\\xb7\\xb7\";\n        if (tmp.added) {\n            out += colors[char]().underline(TITLE(\"Expected:\")) + \"\\n\";\n        } else if (tmp.removed) {\n            out += colors[char]().underline(TITLE(\"Actual:\")) + \"\\n\";\n        }\n        for(j = 0; j < tmp.value.length; j++){\n            isObj = tmp.value[j] && typeof tmp.value[j] === \"object\";\n            val = stringify(tmp.value[j]).split(/\\r?\\n/g);\n            for(k = 0; k < val.length;){\n                str = \"  \" + val[k++] + (isObj ? \"\" : \",\");\n                if (isObj && k === val.length && j + 1 < tmp.value.length) str += \",\";\n                out += LOG(char, str);\n            }\n        }\n    }\n    return out + LOG(\"\\xb7\\xb7\", \"]\");\n}\nfunction lines(input, expect, linenum = 0) {\n    let i = 0, tmp, output = \"\";\n    let arr = diff__WEBPACK_IMPORTED_MODULE_1__.diffLines(input, expect);\n    let pad = String(expect.split(/\\r?\\n/g).length - linenum).length;\n    for(; i < arr.length; i++){\n        output += line(tmp = arr[i], linenum, pad);\n        if (linenum && !tmp.removed) linenum += tmp.count;\n    }\n    return output;\n}\nfunction chars(input, expect) {\n    let arr = diff__WEBPACK_IMPORTED_MODULE_1__.diffChars(input, expect);\n    let i = 0, output = \"\", tmp;\n    let l1 = input.length;\n    let l2 = expect.length;\n    let p1 = PRETTY(input);\n    let p2 = PRETTY(expect);\n    tmp = arr[i];\n    if (l1 === l2) {\n    // no length offsets\n    } else if (tmp.removed && arr[i + 1]) {\n        let del = tmp.count - arr[i + 1].count;\n        if (del == 0) {\n        // wash~\n        } else if (del > 0) {\n            expect = \" \".repeat(del) + expect;\n            p2 = \" \".repeat(del) + p2;\n            l2 += del;\n        } else if (del < 0) {\n            input = \" \".repeat(-del) + input;\n            p1 = \" \".repeat(-del) + p1;\n            l1 += -del;\n        }\n    }\n    output += direct(p1, p2, l1, l2);\n    if (l1 === l2) {\n        for(tmp = \"  \"; i < l1; i++){\n            tmp += input[i] === expect[i] ? \" \" : \"^\";\n        }\n    } else {\n        for(tmp = \"  \"; i < arr.length; i++){\n            tmp += (arr[i].added || arr[i].removed ? \"^\" : \" \").repeat(Math.max(arr[i].count, 0));\n            if (i + 1 < arr.length && (arr[i].added && arr[i + 1].removed || arr[i].removed && arr[i + 1].added)) {\n                arr[i + 1].count -= arr[i].count;\n            }\n        }\n    }\n    return output + kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].red(tmp);\n}\nfunction direct(input, expect, lenA = String(input).length, lenB = String(expect).length) {\n    let gutter = 4;\n    let lenC = Math.max(lenA, lenB);\n    let typeA = typeof input, typeB = typeof expect;\n    if (typeA !== typeB) {\n        gutter = 2;\n        let delA = gutter + lenC - lenA;\n        let delB = gutter + lenC - lenB;\n        input += \" \".repeat(delA) + kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dim(`[${typeA}]`);\n        expect += \" \".repeat(delB) + kleur__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dim(`[${typeB}]`);\n        lenA += delA + typeA.length + 2;\n        lenB += delB + typeB.length + 2;\n        lenC = Math.max(lenA, lenB);\n    }\n    let output = colors[\"++\"](\"++\" + expect + \" \".repeat(gutter + lenC - lenB) + TITLE(\"(Expected)\")) + \"\\n\";\n    return output + colors[\"--\"](\"--\" + input + \" \".repeat(gutter + lenC - lenA) + TITLE(\"(Actual)\")) + \"\\n\";\n}\nfunction sort(input, expect) {\n    var k, i = 0, tmp, isArr = Array.isArray(input);\n    var keys = [], out = isArr ? Array(input.length) : {};\n    if (isArr) {\n        for(i = 0; i < out.length; i++){\n            tmp = input[i];\n            if (!tmp || typeof tmp !== \"object\") out[i] = tmp;\n            else out[i] = sort(tmp, expect[i]); // might not be right\n        }\n    } else {\n        for(k in expect)keys.push(k);\n        for(; i < keys.length; i++){\n            if (Object.prototype.hasOwnProperty.call(input, k = keys[i])) {\n                if (!(tmp = input[k]) || typeof tmp !== \"object\") out[k] = tmp;\n                else out[k] = sort(tmp, expect[k]);\n            }\n        }\n        for(k in input){\n            if (!out.hasOwnProperty(k)) {\n                out[k] = input[k]; // expect didnt have\n            }\n        }\n    }\n    return out;\n}\nfunction circular() {\n    var cache = new Set;\n    return function print(key, val) {\n        if (val === void 0) return \"[__VOID__]\";\n        if (typeof val === \"number\" && val !== val) return \"[__NAN__]\";\n        if (typeof val === \"bigint\") return val.toString();\n        if (!val || typeof val !== \"object\") return val;\n        if (cache.has(val)) return \"[Circular]\";\n        cache.add(val);\n        return val;\n    };\n}\nfunction stringify(input) {\n    return JSON.stringify(input, circular(), 2).replace(/\"\\[__NAN__\\]\"/g, \"NaN\").replace(/\"\\[__VOID__\\]\"/g, \"undefined\");\n}\nfunction compare(input, expect) {\n    if (Array.isArray(expect) && Array.isArray(input)) return arrays(input, expect);\n    if (expect instanceof RegExp) return chars(\"\" + input, \"\" + expect);\n    let isA = input && typeof input == \"object\";\n    let isB = expect && typeof expect == \"object\";\n    if (isA && isB) input = sort(input, expect);\n    if (isB) expect = stringify(expect);\n    if (isA) input = stringify(input);\n    if (expect && typeof expect == \"object\") {\n        input = stringify(sort(input, expect));\n        expect = stringify(expect);\n    }\n    isA = typeof input == \"string\";\n    isB = typeof expect == \"string\";\n    if (isA && /\\r?\\n/.test(input)) return lines(input, \"\" + expect);\n    if (isB && /\\r?\\n/.test(expect)) return lines(\"\" + input, expect);\n    if (isA && isB) return chars(input, expect);\n    return direct(input, expect);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uvu/diff/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uvu/node_modules/diff/lib/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uvu/node_modules/diff/lib/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Diff: () => (/* binding */ Diff),\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   applyPatches: () => (/* binding */ applyPatches),\n/* harmony export */   canonicalize: () => (/* binding */ canonicalize),\n/* harmony export */   convertChangesToDMP: () => (/* binding */ convertChangesToDMP),\n/* harmony export */   convertChangesToXML: () => (/* binding */ convertChangesToXML),\n/* harmony export */   createPatch: () => (/* binding */ createPatch),\n/* harmony export */   createTwoFilesPatch: () => (/* binding */ createTwoFilesPatch),\n/* harmony export */   diffArrays: () => (/* binding */ diffArrays),\n/* harmony export */   diffChars: () => (/* binding */ diffChars),\n/* harmony export */   diffCss: () => (/* binding */ diffCss),\n/* harmony export */   diffJson: () => (/* binding */ diffJson),\n/* harmony export */   diffLines: () => (/* binding */ diffLines),\n/* harmony export */   diffSentences: () => (/* binding */ diffSentences),\n/* harmony export */   diffTrimmedLines: () => (/* binding */ diffTrimmedLines),\n/* harmony export */   diffWords: () => (/* binding */ diffWords),\n/* harmony export */   diffWordsWithSpace: () => (/* binding */ diffWordsWithSpace),\n/* harmony export */   formatPatch: () => (/* binding */ formatPatch),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   parsePatch: () => (/* binding */ parsePatch),\n/* harmony export */   reversePatch: () => (/* binding */ reversePatch),\n/* harmony export */   structuredPatch: () => (/* binding */ structuredPatch)\n/* harmony export */ });\nfunction Diff() {}\nDiff.prototype = {\n    diff: function diff(oldString, newString) {\n        var _options$timeout;\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var callback = options.callback;\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        this.options = options;\n        var self = this;\n        function done(value) {\n            if (callback) {\n                setTimeout(function() {\n                    callback(undefined, value);\n                }, 0);\n                return true;\n            } else {\n                return value;\n            }\n        } // Allow subclasses to massage the input prior to running\n        oldString = this.castInput(oldString);\n        newString = this.castInput(newString);\n        oldString = this.removeEmpty(this.tokenize(oldString));\n        newString = this.removeEmpty(this.tokenize(newString));\n        var newLen = newString.length, oldLen = oldString.length;\n        var editLength = 1;\n        var maxEditLength = newLen + oldLen;\n        if (options.maxEditLength) {\n            maxEditLength = Math.min(maxEditLength, options.maxEditLength);\n        }\n        var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;\n        var abortAfterTimestamp = Date.now() + maxExecutionTime;\n        var bestPath = [\n            {\n                oldPos: -1,\n                lastComponent: undefined\n            }\n        ]; // Seed editLength = 0, i.e. the content starts with the same values\n        var newPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n        if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {\n            // Identity per the equality and tokenizer\n            return done([\n                {\n                    value: this.join(newString),\n                    count: newString.length\n                }\n            ]);\n        } // Once we hit the right edge of the edit graph on some diagonal k, we can\n        // definitely reach the end of the edit graph in no more than k edits, so\n        // there's no point in considering any moves to diagonal k+1 any more (from\n        // which we're guaranteed to need at least k+1 more edits).\n        // Similarly, once we've reached the bottom of the edit graph, there's no\n        // point considering moves to lower diagonals.\n        // We record this fact by setting minDiagonalToConsider and\n        // maxDiagonalToConsider to some finite value once we've hit the edge of\n        // the edit graph.\n        // This optimization is not faithful to the original algorithm presented in\n        // Myers's paper, which instead pointlessly extends D-paths off the end of\n        // the edit graph - see page 7 of Myers's paper which notes this point\n        // explicitly and illustrates it with a diagram. This has major performance\n        // implications for some common scenarios. For instance, to compute a diff\n        // where the new text simply appends d characters on the end of the\n        // original text of length n, the true Myers algorithm will take O(n+d^2)\n        // time while this optimization needs only O(n+d) time.\n        var minDiagonalToConsider = -Infinity, maxDiagonalToConsider = Infinity; // Main worker method. checks all permutations of a given edit length for acceptance.\n        function execEditLength() {\n            for(var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2){\n                var basePath = void 0;\n                var removePath = bestPath[diagonalPath - 1], addPath = bestPath[diagonalPath + 1];\n                if (removePath) {\n                    // No one else is going to attempt to use this value, clear it\n                    bestPath[diagonalPath - 1] = undefined;\n                }\n                var canAdd = false;\n                if (addPath) {\n                    // what newPos will be after we do an insertion:\n                    var addPathNewPos = addPath.oldPos - diagonalPath;\n                    canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;\n                }\n                var canRemove = removePath && removePath.oldPos + 1 < oldLen;\n                if (!canAdd && !canRemove) {\n                    // If this path is a terminal then prune\n                    bestPath[diagonalPath] = undefined;\n                    continue;\n                } // Select the diagonal that we want to branch from. We select the prior\n                // path whose position in the old string is the farthest from the origin\n                // and does not pass the bounds of the diff graph\n                // TODO: Remove the `+ 1` here to make behavior match Myers algorithm\n                //       and prefer to order removals before insertions.\n                if (!canRemove || canAdd && removePath.oldPos + 1 < addPath.oldPos) {\n                    basePath = self.addToPath(addPath, true, undefined, 0);\n                } else {\n                    basePath = self.addToPath(removePath, undefined, true, 1);\n                }\n                newPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n                if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {\n                    // If we have hit the end of both strings, then we are done\n                    return done(buildValues(self, basePath.lastComponent, newString, oldString, self.useLongestToken));\n                } else {\n                    bestPath[diagonalPath] = basePath;\n                    if (basePath.oldPos + 1 >= oldLen) {\n                        maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);\n                    }\n                    if (newPos + 1 >= newLen) {\n                        minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);\n                    }\n                }\n            }\n            editLength++;\n        } // Performs the length of edit iteration. Is a bit fugly as this has to support the\n        // sync and async mode which is never fun. Loops over execEditLength until a value\n        // is produced, or until the edit length exceeds options.maxEditLength (if given),\n        // in which case it will return undefined.\n        if (callback) {\n            (function exec() {\n                setTimeout(function() {\n                    if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {\n                        return callback();\n                    }\n                    if (!execEditLength()) {\n                        exec();\n                    }\n                }, 0);\n            })();\n        } else {\n            while(editLength <= maxEditLength && Date.now() <= abortAfterTimestamp){\n                var ret = execEditLength();\n                if (ret) {\n                    return ret;\n                }\n            }\n        }\n    },\n    addToPath: function addToPath(path, added, removed, oldPosInc) {\n        var last = path.lastComponent;\n        if (last && last.added === added && last.removed === removed) {\n            return {\n                oldPos: path.oldPos + oldPosInc,\n                lastComponent: {\n                    count: last.count + 1,\n                    added: added,\n                    removed: removed,\n                    previousComponent: last.previousComponent\n                }\n            };\n        } else {\n            return {\n                oldPos: path.oldPos + oldPosInc,\n                lastComponent: {\n                    count: 1,\n                    added: added,\n                    removed: removed,\n                    previousComponent: last\n                }\n            };\n        }\n    },\n    extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n        var newLen = newString.length, oldLen = oldString.length, oldPos = basePath.oldPos, newPos = oldPos - diagonalPath, commonCount = 0;\n        while(newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])){\n            newPos++;\n            oldPos++;\n            commonCount++;\n        }\n        if (commonCount) {\n            basePath.lastComponent = {\n                count: commonCount,\n                previousComponent: basePath.lastComponent\n            };\n        }\n        basePath.oldPos = oldPos;\n        return newPos;\n    },\n    equals: function equals(left, right) {\n        if (this.options.comparator) {\n            return this.options.comparator(left, right);\n        } else {\n            return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n        }\n    },\n    removeEmpty: function removeEmpty(array) {\n        var ret = [];\n        for(var i = 0; i < array.length; i++){\n            if (array[i]) {\n                ret.push(array[i]);\n            }\n        }\n        return ret;\n    },\n    castInput: function castInput(value) {\n        return value;\n    },\n    tokenize: function tokenize(value) {\n        return value.split(\"\");\n    },\n    join: function join(chars) {\n        return chars.join(\"\");\n    }\n};\nfunction buildValues(diff, lastComponent, newString, oldString, useLongestToken) {\n    // First we convert our linked list of components in reverse order to an\n    // array in the right order:\n    var components = [];\n    var nextComponent;\n    while(lastComponent){\n        components.push(lastComponent);\n        nextComponent = lastComponent.previousComponent;\n        delete lastComponent.previousComponent;\n        lastComponent = nextComponent;\n    }\n    components.reverse();\n    var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;\n    for(; componentPos < componentLen; componentPos++){\n        var component = components[componentPos];\n        if (!component.removed) {\n            if (!component.added && useLongestToken) {\n                var value = newString.slice(newPos, newPos + component.count);\n                value = value.map(function(value, i) {\n                    var oldValue = oldString[oldPos + i];\n                    return oldValue.length > value.length ? oldValue : value;\n                });\n                component.value = diff.join(value);\n            } else {\n                component.value = diff.join(newString.slice(newPos, newPos + component.count));\n            }\n            newPos += component.count; // Common case\n            if (!component.added) {\n                oldPos += component.count;\n            }\n        } else {\n            component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n            oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\n            // The diffing algorithm is tied to add then remove output and this is the simplest\n            // route to get the desired output with minimal overhead.\n            if (componentPos && components[componentPos - 1].added) {\n                var tmp = components[componentPos - 1];\n                components[componentPos - 1] = components[componentPos];\n                components[componentPos] = tmp;\n            }\n        }\n    } // Special case handle for when one terminal is ignored (i.e. whitespace).\n    // For this case we merge the terminal into the prior string and drop the change.\n    // This is only available for string mode.\n    var finalComponent = components[componentLen - 1];\n    if (componentLen > 1 && typeof finalComponent.value === \"string\" && (finalComponent.added || finalComponent.removed) && diff.equals(\"\", finalComponent.value)) {\n        components[componentLen - 2].value += finalComponent.value;\n        components.pop();\n    }\n    return components;\n}\nvar characterDiff = new Diff();\nfunction diffChars(oldStr, newStr, options) {\n    return characterDiff.diff(oldStr, newStr, options);\n}\nfunction generateOptions(options, defaults) {\n    if (typeof options === \"function\") {\n        defaults.callback = options;\n    } else if (options) {\n        for(var name in options){\n            /* istanbul ignore else */ if (options.hasOwnProperty(name)) {\n                defaults[name] = options[name];\n            }\n        }\n    }\n    return defaults;\n}\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\nvar reWhitespace = /\\S/;\nvar wordDiff = new Diff();\nwordDiff.equals = function(left, right) {\n    if (this.options.ignoreCase) {\n        left = left.toLowerCase();\n        right = right.toLowerCase();\n    }\n    return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\nwordDiff.tokenize = function(value) {\n    // All whitespace symbols except newline group into one token, each newline - in separate token\n    var tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n    for(var i = 0; i < tokens.length - 1; i++){\n        // If we have an empty string in the next field and we have only word chars before and after, merge\n        if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n            tokens[i] += tokens[i + 2];\n            tokens.splice(i + 1, 2);\n            i--;\n        }\n    }\n    return tokens;\n};\nfunction diffWords(oldStr, newStr, options) {\n    options = generateOptions(options, {\n        ignoreWhitespace: true\n    });\n    return wordDiff.diff(oldStr, newStr, options);\n}\nfunction diffWordsWithSpace(oldStr, newStr, options) {\n    return wordDiff.diff(oldStr, newStr, options);\n}\nvar lineDiff = new Diff();\nlineDiff.tokenize = function(value) {\n    if (this.options.stripTrailingCr) {\n        // remove one \\r before \\n to match GNU diff's --strip-trailing-cr behavior\n        value = value.replace(/\\r\\n/g, \"\\n\");\n    }\n    var retLines = [], linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n        linesAndNewlines.pop();\n    } // Merge the content and line separators into single tokens\n    for(var i = 0; i < linesAndNewlines.length; i++){\n        var line = linesAndNewlines[i];\n        if (i % 2 && !this.options.newlineIsToken) {\n            retLines[retLines.length - 1] += line;\n        } else {\n            if (this.options.ignoreWhitespace) {\n                line = line.trim();\n            }\n            retLines.push(line);\n        }\n    }\n    return retLines;\n};\nfunction diffLines(oldStr, newStr, callback) {\n    return lineDiff.diff(oldStr, newStr, callback);\n}\nfunction diffTrimmedLines(oldStr, newStr, callback) {\n    var options = generateOptions(callback, {\n        ignoreWhitespace: true\n    });\n    return lineDiff.diff(oldStr, newStr, options);\n}\nvar sentenceDiff = new Diff();\nsentenceDiff.tokenize = function(value) {\n    return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\nfunction diffSentences(oldStr, newStr, callback) {\n    return sentenceDiff.diff(oldStr, newStr, callback);\n}\nvar cssDiff = new Diff();\ncssDiff.tokenize = function(value) {\n    return value.split(/([{}:;,]|\\s+)/);\n};\nfunction diffCss(oldStr, newStr, callback) {\n    return cssDiff.diff(oldStr, newStr, callback);\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar objectPrototypeToString = Object.prototype.toString;\nvar jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\njsonDiff.useLongestToken = true;\njsonDiff.tokenize = lineDiff.tokenize;\njsonDiff.castInput = function(value) {\n    var _this$options = this.options, undefinedReplacement = _this$options.undefinedReplacement, _this$options$stringi = _this$options.stringifyReplacer, stringifyReplacer = _this$options$stringi === void 0 ? function(k, v) {\n        return typeof v === \"undefined\" ? undefinedReplacement : v;\n    } : _this$options$stringi;\n    return typeof value === \"string\" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, \"  \");\n};\njsonDiff.equals = function(left, right) {\n    return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, \"$1\"), right.replace(/,([\\r\\n])/g, \"$1\"));\n};\nfunction diffJson(oldObj, newObj, options) {\n    return jsonDiff.diff(oldObj, newObj, options);\n} // This function handles the presence of circular references by bailing out when encountering an\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\nfunction canonicalize(obj, stack, replacementStack, replacer, key) {\n    stack = stack || [];\n    replacementStack = replacementStack || [];\n    if (replacer) {\n        obj = replacer(key, obj);\n    }\n    var i;\n    for(i = 0; i < stack.length; i += 1){\n        if (stack[i] === obj) {\n            return replacementStack[i];\n        }\n    }\n    var canonicalizedObj;\n    if (\"[object Array]\" === objectPrototypeToString.call(obj)) {\n        stack.push(obj);\n        canonicalizedObj = new Array(obj.length);\n        replacementStack.push(canonicalizedObj);\n        for(i = 0; i < obj.length; i += 1){\n            canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n        }\n        stack.pop();\n        replacementStack.pop();\n        return canonicalizedObj;\n    }\n    if (obj && obj.toJSON) {\n        obj = obj.toJSON();\n    }\n    if (_typeof(obj) === \"object\" && obj !== null) {\n        stack.push(obj);\n        canonicalizedObj = {};\n        replacementStack.push(canonicalizedObj);\n        var sortedKeys = [], _key;\n        for(_key in obj){\n            /* istanbul ignore else */ if (obj.hasOwnProperty(_key)) {\n                sortedKeys.push(_key);\n            }\n        }\n        sortedKeys.sort();\n        for(i = 0; i < sortedKeys.length; i += 1){\n            _key = sortedKeys[i];\n            canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n        }\n        stack.pop();\n        replacementStack.pop();\n    } else {\n        canonicalizedObj = obj;\n    }\n    return canonicalizedObj;\n}\nvar arrayDiff = new Diff();\narrayDiff.tokenize = function(value) {\n    return value.slice();\n};\narrayDiff.join = arrayDiff.removeEmpty = function(value) {\n    return value;\n};\nfunction diffArrays(oldArr, newArr, callback) {\n    return arrayDiff.diff(oldArr, newArr, callback);\n}\nfunction parsePatch(uniDiff) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/), delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [], list = [], i = 0;\n    function parseIndex() {\n        var index = {};\n        list.push(index); // Parse diff metadata\n        while(i < diffstr.length){\n            var line = diffstr[i]; // File header found, end parsing diff metadata\n            if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n                break;\n            } // Diff index\n            var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n            if (header) {\n                index.index = header[1];\n            }\n            i++;\n        } // Parse file headers if they are defined. Unified diff requires them, but\n        // there's no technical issues to have an isolated hunk without file header\n        parseFileHeader(index);\n        parseFileHeader(index); // Parse hunks\n        index.hunks = [];\n        while(i < diffstr.length){\n            var _line = diffstr[i];\n            if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n                break;\n            } else if (/^@@/.test(_line)) {\n                index.hunks.push(parseHunk());\n            } else if (_line && options.strict) {\n                // Ignore unexpected content unless in strict mode\n                throw new Error(\"Unknown line \" + (i + 1) + \" \" + JSON.stringify(_line));\n            } else {\n                i++;\n            }\n        }\n    } // Parses the --- and +++ headers, if none are found, no lines\n    // are consumed.\n    function parseFileHeader(index) {\n        var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\n        if (fileHeader) {\n            var keyPrefix = fileHeader[1] === \"---\" ? \"old\" : \"new\";\n            var data = fileHeader[2].split(\"\t\", 2);\n            var fileName = data[0].replace(/\\\\\\\\/g, \"\\\\\");\n            if (/^\".*\"$/.test(fileName)) {\n                fileName = fileName.substr(1, fileName.length - 2);\n            }\n            index[keyPrefix + \"FileName\"] = fileName;\n            index[keyPrefix + \"Header\"] = (data[1] || \"\").trim();\n            i++;\n        }\n    } // Parses a hunk\n    // This assumes that we are at the start of a hunk.\n    function parseHunk() {\n        var chunkHeaderIndex = i, chunkHeaderLine = diffstr[i++], chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n        var hunk = {\n            oldStart: +chunkHeader[1],\n            oldLines: typeof chunkHeader[2] === \"undefined\" ? 1 : +chunkHeader[2],\n            newStart: +chunkHeader[3],\n            newLines: typeof chunkHeader[4] === \"undefined\" ? 1 : +chunkHeader[4],\n            lines: [],\n            linedelimiters: []\n        }; // Unified Diff Format quirk: If the chunk size is 0,\n        // the first number is one lower than one would expect.\n        // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n        if (hunk.oldLines === 0) {\n            hunk.oldStart += 1;\n        }\n        if (hunk.newLines === 0) {\n            hunk.newStart += 1;\n        }\n        var addCount = 0, removeCount = 0;\n        for(; i < diffstr.length; i++){\n            // Lines starting with '---' could be mistaken for the \"remove line\" operation\n            // But they could be the header for the next file. Therefore prune such cases out.\n            if (diffstr[i].indexOf(\"--- \") === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf(\"+++ \") === 0 && diffstr[i + 2].indexOf(\"@@\") === 0) {\n                break;\n            }\n            var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? \" \" : diffstr[i][0];\n            if (operation === \"+\" || operation === \"-\" || operation === \" \" || operation === \"\\\\\") {\n                hunk.lines.push(diffstr[i]);\n                hunk.linedelimiters.push(delimiters[i] || \"\\n\");\n                if (operation === \"+\") {\n                    addCount++;\n                } else if (operation === \"-\") {\n                    removeCount++;\n                } else if (operation === \" \") {\n                    addCount++;\n                    removeCount++;\n                }\n            } else {\n                break;\n            }\n        } // Handle the empty block count case\n        if (!addCount && hunk.newLines === 1) {\n            hunk.newLines = 0;\n        }\n        if (!removeCount && hunk.oldLines === 1) {\n            hunk.oldLines = 0;\n        } // Perform optional sanity checking\n        if (options.strict) {\n            if (addCount !== hunk.newLines) {\n                throw new Error(\"Added line count did not match for hunk at line \" + (chunkHeaderIndex + 1));\n            }\n            if (removeCount !== hunk.oldLines) {\n                throw new Error(\"Removed line count did not match for hunk at line \" + (chunkHeaderIndex + 1));\n            }\n        }\n        return hunk;\n    }\n    while(i < diffstr.length){\n        parseIndex();\n    }\n    return list;\n}\n// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nfunction distanceIterator(start, minLine, maxLine) {\n    var wantForward = true, backwardExhausted = false, forwardExhausted = false, localOffset = 1;\n    return function iterator() {\n        if (wantForward && !forwardExhausted) {\n            if (backwardExhausted) {\n                localOffset++;\n            } else {\n                wantForward = false;\n            } // Check if trying to fit beyond text length, and if not, check it fits\n            // after offset location (or desired location on first iteration)\n            if (start + localOffset <= maxLine) {\n                return localOffset;\n            }\n            forwardExhausted = true;\n        }\n        if (!backwardExhausted) {\n            if (!forwardExhausted) {\n                wantForward = true;\n            } // Check if trying to fit before text beginning, and if not, check it fits\n            // before offset location\n            if (minLine <= start - localOffset) {\n                return -localOffset++;\n            }\n            backwardExhausted = true;\n            return iterator();\n        } // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n    };\n}\nfunction applyPatch(source, uniDiff) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (typeof uniDiff === \"string\") {\n        uniDiff = parsePatch(uniDiff);\n    }\n    if (Array.isArray(uniDiff)) {\n        if (uniDiff.length > 1) {\n            throw new Error(\"applyPatch only works with a single input.\");\n        }\n        uniDiff = uniDiff[0];\n    } // Apply the diff to the input\n    var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/), delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [], hunks = uniDiff.hunks, compareLine = options.compareLine || function(lineNumber, line, operation, patchContent) {\n        return line === patchContent;\n    }, errorCount = 0, fuzzFactor = options.fuzzFactor || 0, minLine = 0, offset = 0, removeEOFNL, addEOFNL;\n    /**\n   * Checks if the hunk exactly fits on the provided location\n   */ function hunkFits(hunk, toPos) {\n        for(var j = 0; j < hunk.lines.length; j++){\n            var line = hunk.lines[j], operation = line.length > 0 ? line[0] : \" \", content = line.length > 0 ? line.substr(1) : line;\n            if (operation === \" \" || operation === \"-\") {\n                // Context sanity check\n                if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n                    errorCount++;\n                    if (errorCount > fuzzFactor) {\n                        return false;\n                    }\n                }\n                toPos++;\n            }\n        }\n        return true;\n    } // Search best fit offsets for each hunk based on the previous ones\n    for(var i = 0; i < hunks.length; i++){\n        var hunk = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 0, toPos = offset + hunk.oldStart - 1;\n        var iterator = distanceIterator(toPos, minLine, maxLine);\n        for(; localOffset !== undefined; localOffset = iterator()){\n            if (hunkFits(hunk, toPos + localOffset)) {\n                hunk.offset = offset += localOffset;\n                break;\n            }\n        }\n        if (localOffset === undefined) {\n            return false;\n        } // Set lower text limit to end of the current hunk, so next ones don't try\n        // to fit over already patched text\n        minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n    } // Apply patch hunks\n    var diffOffset = 0;\n    for(var _i = 0; _i < hunks.length; _i++){\n        var _hunk = hunks[_i], _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\n        diffOffset += _hunk.newLines - _hunk.oldLines;\n        for(var j = 0; j < _hunk.lines.length; j++){\n            var line = _hunk.lines[j], operation = line.length > 0 ? line[0] : \" \", content = line.length > 0 ? line.substr(1) : line, delimiter = _hunk.linedelimiters && _hunk.linedelimiters[j] || \"\\n\";\n            if (operation === \" \") {\n                _toPos++;\n            } else if (operation === \"-\") {\n                lines.splice(_toPos, 1);\n                delimiters.splice(_toPos, 1);\n            /* istanbul ignore else */ } else if (operation === \"+\") {\n                lines.splice(_toPos, 0, content);\n                delimiters.splice(_toPos, 0, delimiter);\n                _toPos++;\n            } else if (operation === \"\\\\\") {\n                var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n                if (previousOperation === \"+\") {\n                    removeEOFNL = true;\n                } else if (previousOperation === \"-\") {\n                    addEOFNL = true;\n                }\n            }\n        }\n    } // Handle EOFNL insertion/removal\n    if (removeEOFNL) {\n        while(!lines[lines.length - 1]){\n            lines.pop();\n            delimiters.pop();\n        }\n    } else if (addEOFNL) {\n        lines.push(\"\");\n        delimiters.push(\"\\n\");\n    }\n    for(var _k = 0; _k < lines.length - 1; _k++){\n        lines[_k] = lines[_k] + delimiters[_k];\n    }\n    return lines.join(\"\");\n} // Wrapper that supports multiple file patches via callbacks.\nfunction applyPatches(uniDiff, options) {\n    if (typeof uniDiff === \"string\") {\n        uniDiff = parsePatch(uniDiff);\n    }\n    var currentIndex = 0;\n    function processIndex() {\n        var index = uniDiff[currentIndex++];\n        if (!index) {\n            return options.complete();\n        }\n        options.loadFile(index, function(err, data) {\n            if (err) {\n                return options.complete(err);\n            }\n            var updatedContent = applyPatch(data, index, options);\n            options.patched(index, updatedContent, function(err) {\n                if (err) {\n                    return options.complete(err);\n                }\n                processIndex();\n            });\n        });\n    }\n    processIndex();\n}\nfunction structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof options.context === \"undefined\") {\n        options.context = 4;\n    }\n    var diff = diffLines(oldStr, newStr, options);\n    if (!diff) {\n        return;\n    }\n    diff.push({\n        value: \"\",\n        lines: []\n    }); // Append an empty value to make cleanup easier\n    function contextLines(lines) {\n        return lines.map(function(entry) {\n            return \" \" + entry;\n        });\n    }\n    var hunks = [];\n    var oldRangeStart = 0, newRangeStart = 0, curRange = [], oldLine = 1, newLine = 1;\n    var _loop = function _loop(i) {\n        var current = diff[i], lines = current.lines || current.value.replace(/\\n$/, \"\").split(\"\\n\");\n        current.lines = lines;\n        if (current.added || current.removed) {\n            var _curRange;\n            // If we have previous context, start with that\n            if (!oldRangeStart) {\n                var prev = diff[i - 1];\n                oldRangeStart = oldLine;\n                newRangeStart = newLine;\n                if (prev) {\n                    curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n                    oldRangeStart -= curRange.length;\n                    newRangeStart -= curRange.length;\n                }\n            } // Output our changes\n            (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function(entry) {\n                return (current.added ? \"+\" : \"-\") + entry;\n            }))); // Track the updated file position\n            if (current.added) {\n                newLine += lines.length;\n            } else {\n                oldLine += lines.length;\n            }\n        } else {\n            // Identical context lines. Track line changes\n            if (oldRangeStart) {\n                // Close out any changes that have been output (or join overlapping)\n                if (lines.length <= options.context * 2 && i < diff.length - 2) {\n                    var _curRange2;\n                    // Overlapping\n                    (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));\n                } else {\n                    var _curRange3;\n                    // end the range and output\n                    var contextSize = Math.min(lines.length, options.context);\n                    (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));\n                    var hunk = {\n                        oldStart: oldRangeStart,\n                        oldLines: oldLine - oldRangeStart + contextSize,\n                        newStart: newRangeStart,\n                        newLines: newLine - newRangeStart + contextSize,\n                        lines: curRange\n                    };\n                    if (i >= diff.length - 2 && lines.length <= options.context) {\n                        // EOF is inside this hunk\n                        var oldEOFNewline = /\\n$/.test(oldStr);\n                        var newEOFNewline = /\\n$/.test(newStr);\n                        var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\n                        if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {\n                            // special case: old has no eol and no trailing context; no-nl can end up before adds\n                            // however, if the old file is empty, do not output the no-nl line\n                            curRange.splice(hunk.oldLines, 0, \"\\\\ No newline at end of file\");\n                        }\n                        if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\n                            curRange.push(\"\\\\ No newline at end of file\");\n                        }\n                    }\n                    hunks.push(hunk);\n                    oldRangeStart = 0;\n                    newRangeStart = 0;\n                    curRange = [];\n                }\n            }\n            oldLine += lines.length;\n            newLine += lines.length;\n        }\n    };\n    for(var i = 0; i < diff.length; i++){\n        _loop(i);\n    }\n    return {\n        oldFileName: oldFileName,\n        newFileName: newFileName,\n        oldHeader: oldHeader,\n        newHeader: newHeader,\n        hunks: hunks\n    };\n}\nfunction formatPatch(diff) {\n    if (Array.isArray(diff)) {\n        return diff.map(formatPatch).join(\"\\n\");\n    }\n    var ret = [];\n    if (diff.oldFileName == diff.newFileName) {\n        ret.push(\"Index: \" + diff.oldFileName);\n    }\n    ret.push(\"===================================================================\");\n    ret.push(\"--- \" + diff.oldFileName + (typeof diff.oldHeader === \"undefined\" ? \"\" : \"\t\" + diff.oldHeader));\n    ret.push(\"+++ \" + diff.newFileName + (typeof diff.newHeader === \"undefined\" ? \"\" : \"\t\" + diff.newHeader));\n    for(var i = 0; i < diff.hunks.length; i++){\n        var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,\n        // the first number is one lower than one would expect.\n        // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n        if (hunk.oldLines === 0) {\n            hunk.oldStart -= 1;\n        }\n        if (hunk.newLines === 0) {\n            hunk.newStart -= 1;\n        }\n        ret.push(\"@@ -\" + hunk.oldStart + \",\" + hunk.oldLines + \" +\" + hunk.newStart + \",\" + hunk.newLines + \" @@\");\n        ret.push.apply(ret, hunk.lines);\n    }\n    return ret.join(\"\\n\") + \"\\n\";\n}\nfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n    return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));\n}\nfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n    return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n}\nfunction arrayEqual(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return arrayStartsWith(a, b);\n}\nfunction arrayStartsWith(array, start) {\n    if (start.length > array.length) {\n        return false;\n    }\n    for(var i = 0; i < start.length; i++){\n        if (start[i] !== array[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction calcLineCount(hunk) {\n    var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines), oldLines = _calcOldNewLineCount.oldLines, newLines = _calcOldNewLineCount.newLines;\n    if (oldLines !== undefined) {\n        hunk.oldLines = oldLines;\n    } else {\n        delete hunk.oldLines;\n    }\n    if (newLines !== undefined) {\n        hunk.newLines = newLines;\n    } else {\n        delete hunk.newLines;\n    }\n}\nfunction merge(mine, theirs, base) {\n    mine = loadPatch(mine, base);\n    theirs = loadPatch(theirs, base);\n    var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\n    // Leaving sanity checks on this to the API consumer that may know more about the\n    // meaning in their own context.\n    if (mine.index || theirs.index) {\n        ret.index = mine.index || theirs.index;\n    }\n    if (mine.newFileName || theirs.newFileName) {\n        if (!fileNameChanged(mine)) {\n            // No header or no change in ours, use theirs (and ours if theirs does not exist)\n            ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n            ret.newFileName = theirs.newFileName || mine.newFileName;\n            ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n            ret.newHeader = theirs.newHeader || mine.newHeader;\n        } else if (!fileNameChanged(theirs)) {\n            // No header or no change in theirs, use ours\n            ret.oldFileName = mine.oldFileName;\n            ret.newFileName = mine.newFileName;\n            ret.oldHeader = mine.oldHeader;\n            ret.newHeader = mine.newHeader;\n        } else {\n            // Both changed... figure it out\n            ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n            ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n            ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n            ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n        }\n    }\n    ret.hunks = [];\n    var mineIndex = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;\n    while(mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length){\n        var mineCurrent = mine.hunks[mineIndex] || {\n            oldStart: Infinity\n        }, theirsCurrent = theirs.hunks[theirsIndex] || {\n            oldStart: Infinity\n        };\n        if (hunkBefore(mineCurrent, theirsCurrent)) {\n            // This patch does not overlap with any of the others, yay.\n            ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n            mineIndex++;\n            theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n        } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n            // This patch does not overlap with any of the others, yay.\n            ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n            theirsIndex++;\n            mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n        } else {\n            // Overlap, merge as best we can\n            var mergedHunk = {\n                oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n                oldLines: 0,\n                newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n                newLines: 0,\n                lines: []\n            };\n            mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n            theirsIndex++;\n            mineIndex++;\n            ret.hunks.push(mergedHunk);\n        }\n    }\n    return ret;\n}\nfunction loadPatch(param, base) {\n    if (typeof param === \"string\") {\n        if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n            return parsePatch(param)[0];\n        }\n        if (!base) {\n            throw new Error(\"Must provide a base reference or pass in a patch\");\n        }\n        return structuredPatch(undefined, undefined, base, param);\n    }\n    return param;\n}\nfunction fileNameChanged(patch) {\n    return patch.newFileName && patch.newFileName !== patch.oldFileName;\n}\nfunction selectField(index, mine, theirs) {\n    if (mine === theirs) {\n        return mine;\n    } else {\n        index.conflict = true;\n        return {\n            mine: mine,\n            theirs: theirs\n        };\n    }\n}\nfunction hunkBefore(test, check) {\n    return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n}\nfunction cloneHunk(hunk, offset) {\n    return {\n        oldStart: hunk.oldStart,\n        oldLines: hunk.oldLines,\n        newStart: hunk.newStart + offset,\n        newLines: hunk.newLines,\n        lines: hunk.lines\n    };\n}\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n    // This will generally result in a conflicted hunk, but there are cases where the context\n    // is the only overlap where we can successfully merge the content here.\n    var mine = {\n        offset: mineOffset,\n        lines: mineLines,\n        index: 0\n    }, their = {\n        offset: theirOffset,\n        lines: theirLines,\n        index: 0\n    }; // Handle any leading content\n    insertLeading(hunk, mine, their);\n    insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\n    while(mine.index < mine.lines.length && their.index < their.lines.length){\n        var mineCurrent = mine.lines[mine.index], theirCurrent = their.lines[their.index];\n        if ((mineCurrent[0] === \"-\" || mineCurrent[0] === \"+\") && (theirCurrent[0] === \"-\" || theirCurrent[0] === \"+\")) {\n            // Both modified ...\n            mutualChange(hunk, mine, their);\n        } else if (mineCurrent[0] === \"+\" && theirCurrent[0] === \" \") {\n            var _hunk$lines;\n            // Mine inserted\n            (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));\n        } else if (theirCurrent[0] === \"+\" && mineCurrent[0] === \" \") {\n            var _hunk$lines2;\n            // Theirs inserted\n            (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));\n        } else if (mineCurrent[0] === \"-\" && theirCurrent[0] === \" \") {\n            // Mine removed or edited\n            removal(hunk, mine, their);\n        } else if (theirCurrent[0] === \"-\" && mineCurrent[0] === \" \") {\n            // Their removed or edited\n            removal(hunk, their, mine, true);\n        } else if (mineCurrent === theirCurrent) {\n            // Context identity\n            hunk.lines.push(mineCurrent);\n            mine.index++;\n            their.index++;\n        } else {\n            // Context mismatch\n            conflict(hunk, collectChange(mine), collectChange(their));\n        }\n    } // Now push anything that may be remaining\n    insertTrailing(hunk, mine);\n    insertTrailing(hunk, their);\n    calcLineCount(hunk);\n}\nfunction mutualChange(hunk, mine, their) {\n    var myChanges = collectChange(mine), theirChanges = collectChange(their);\n    if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n        // Special case for remove changes that are supersets of one another\n        if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n            var _hunk$lines3;\n            (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));\n            return;\n        } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n            var _hunk$lines4;\n            (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));\n            return;\n        }\n    } else if (arrayEqual(myChanges, theirChanges)) {\n        var _hunk$lines5;\n        (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));\n        return;\n    }\n    conflict(hunk, myChanges, theirChanges);\n}\nfunction removal(hunk, mine, their, swap) {\n    var myChanges = collectChange(mine), theirChanges = collectContext(their, myChanges);\n    if (theirChanges.merged) {\n        var _hunk$lines6;\n        (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));\n    } else {\n        conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n    }\n}\nfunction conflict(hunk, mine, their) {\n    hunk.conflict = true;\n    hunk.lines.push({\n        conflict: true,\n        mine: mine,\n        theirs: their\n    });\n}\nfunction insertLeading(hunk, insert, their) {\n    while(insert.offset < their.offset && insert.index < insert.lines.length){\n        var line = insert.lines[insert.index++];\n        hunk.lines.push(line);\n        insert.offset++;\n    }\n}\nfunction insertTrailing(hunk, insert) {\n    while(insert.index < insert.lines.length){\n        var line = insert.lines[insert.index++];\n        hunk.lines.push(line);\n    }\n}\nfunction collectChange(state) {\n    var ret = [], operation = state.lines[state.index][0];\n    while(state.index < state.lines.length){\n        var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n        if (operation === \"-\" && line[0] === \"+\") {\n            operation = \"+\";\n        }\n        if (operation === line[0]) {\n            ret.push(line);\n            state.index++;\n        } else {\n            break;\n        }\n    }\n    return ret;\n}\nfunction collectContext(state, matchChanges) {\n    var changes = [], merged = [], matchIndex = 0, contextChanges = false, conflicted = false;\n    while(matchIndex < matchChanges.length && state.index < state.lines.length){\n        var change = state.lines[state.index], match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\n        if (match[0] === \"+\") {\n            break;\n        }\n        contextChanges = contextChanges || change[0] !== \" \";\n        merged.push(match);\n        matchIndex++; // Consume any additions in the other block as a conflict to attempt\n        // to pull in the remaining context after this\n        if (change[0] === \"+\") {\n            conflicted = true;\n            while(change[0] === \"+\"){\n                changes.push(change);\n                change = state.lines[++state.index];\n            }\n        }\n        if (match.substr(1) === change.substr(1)) {\n            changes.push(change);\n            state.index++;\n        } else {\n            conflicted = true;\n        }\n    }\n    if ((matchChanges[matchIndex] || \"\")[0] === \"+\" && contextChanges) {\n        conflicted = true;\n    }\n    if (conflicted) {\n        return changes;\n    }\n    while(matchIndex < matchChanges.length){\n        merged.push(matchChanges[matchIndex++]);\n    }\n    return {\n        merged: merged,\n        changes: changes\n    };\n}\nfunction allRemoves(changes) {\n    return changes.reduce(function(prev, change) {\n        return prev && change[0] === \"-\";\n    }, true);\n}\nfunction skipRemoveSuperset(state, removeChanges, delta) {\n    for(var i = 0; i < delta; i++){\n        var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n        if (state.lines[state.index + i] !== \" \" + changeContent) {\n            return false;\n        }\n    }\n    state.index += delta;\n    return true;\n}\nfunction calcOldNewLineCount(lines) {\n    var oldLines = 0;\n    var newLines = 0;\n    lines.forEach(function(line) {\n        if (typeof line !== \"string\") {\n            var myCount = calcOldNewLineCount(line.mine);\n            var theirCount = calcOldNewLineCount(line.theirs);\n            if (oldLines !== undefined) {\n                if (myCount.oldLines === theirCount.oldLines) {\n                    oldLines += myCount.oldLines;\n                } else {\n                    oldLines = undefined;\n                }\n            }\n            if (newLines !== undefined) {\n                if (myCount.newLines === theirCount.newLines) {\n                    newLines += myCount.newLines;\n                } else {\n                    newLines = undefined;\n                }\n            }\n        } else {\n            if (newLines !== undefined && (line[0] === \"+\" || line[0] === \" \")) {\n                newLines++;\n            }\n            if (oldLines !== undefined && (line[0] === \"-\" || line[0] === \" \")) {\n                oldLines++;\n            }\n        }\n    });\n    return {\n        oldLines: oldLines,\n        newLines: newLines\n    };\n}\nfunction reversePatch(structuredPatch) {\n    if (Array.isArray(structuredPatch)) {\n        return structuredPatch.map(reversePatch).reverse();\n    }\n    return _objectSpread2(_objectSpread2({}, structuredPatch), {}, {\n        oldFileName: structuredPatch.newFileName,\n        oldHeader: structuredPatch.newHeader,\n        newFileName: structuredPatch.oldFileName,\n        newHeader: structuredPatch.oldHeader,\n        hunks: structuredPatch.hunks.map(function(hunk) {\n            return {\n                oldLines: hunk.newLines,\n                oldStart: hunk.newStart,\n                newLines: hunk.oldLines,\n                newStart: hunk.oldStart,\n                linedelimiters: hunk.linedelimiters,\n                lines: hunk.lines.map(function(l) {\n                    if (l.startsWith(\"-\")) {\n                        return \"+\".concat(l.slice(1));\n                    }\n                    if (l.startsWith(\"+\")) {\n                        return \"-\".concat(l.slice(1));\n                    }\n                    return l;\n                })\n            };\n        })\n    });\n}\n// See: http://code.google.com/p/google-diff-match-patch/wiki/API\nfunction convertChangesToDMP(changes) {\n    var ret = [], change, operation;\n    for(var i = 0; i < changes.length; i++){\n        change = changes[i];\n        if (change.added) {\n            operation = 1;\n        } else if (change.removed) {\n            operation = -1;\n        } else {\n            operation = 0;\n        }\n        ret.push([\n            operation,\n            change.value\n        ]);\n    }\n    return ret;\n}\nfunction convertChangesToXML(changes) {\n    var ret = [];\n    for(var i = 0; i < changes.length; i++){\n        var change = changes[i];\n        if (change.added) {\n            ret.push(\"<ins>\");\n        } else if (change.removed) {\n            ret.push(\"<del>\");\n        }\n        ret.push(escapeHTML(change.value));\n        if (change.added) {\n            ret.push(\"</ins>\");\n        } else if (change.removed) {\n            ret.push(\"</del>\");\n        }\n    }\n    return ret.join(\"\");\n}\nfunction escapeHTML(s) {\n    var n = s;\n    n = n.replace(/&/g, \"&amp;\");\n    n = n.replace(/</g, \"&lt;\");\n    n = n.replace(/>/g, \"&gt;\");\n    n = n.replace(/\"/g, \"&quot;\");\n    return n;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uvu/node_modules/diff/lib/index.mjs\n");

/***/ })

};
;