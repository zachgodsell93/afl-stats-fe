"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-toc";
exports.ids = ["vendor-chunks/mdast-util-toc"];
exports.modules = {

/***/ "(rsc)/./node_modules/mdast-util-toc/lib/contents.js":
/*!*****************************************************!*\
  !*** ./node_modules/mdast-util-toc/lib/contents.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contents: () => (/* binding */ contents)\n/* harmony export */ });\n/* harmony import */ var extend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\n/* harmony import */ var extend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(extend__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('./search.js').SearchEntry} SearchEntry\n */ /**\n * @typedef ContentsOptions\n *   Build configuration.\n * @property {boolean | null | undefined} [tight=false]\n *   Whether to compile list items tightly.\n * @property {boolean | null | undefined} [ordered=false]\n *   Whether to compile list items as an ordered list, otherwise they are\n *   unordered.\n * @property {string | null | undefined} [prefix=undefined]\n *   Add a prefix to links to headings in the table of contents.\n *\n *   Useful for example when later going from mdast to hast and sanitizing with\n *   `hast-util-sanitize`.\n */ \n/**\n * Transform a list of heading objects to a markdown list.\n *\n * @param {Array<SearchEntry>} map\n * @param {ContentsOptions} settings\n */ function contents(map, settings) {\n    const { ordered = false, tight = false, prefix = null } = settings;\n    /** @type {List} */ const table = {\n        type: \"list\",\n        ordered,\n        spread: false,\n        children: []\n    };\n    let minDepth = Number.POSITIVE_INFINITY;\n    let index = -1;\n    // Find minimum depth.\n    while(++index < map.length){\n        if (map[index].depth < minDepth) {\n            minDepth = map[index].depth;\n        }\n    }\n    // Normalize depth.\n    index = -1;\n    while(++index < map.length){\n        map[index].depth -= minDepth - 1;\n    }\n    // Add TOC to list.\n    index = -1;\n    while(++index < map.length){\n        insert(map[index], table, {\n            ordered,\n            tight,\n            prefix\n        });\n    }\n    return table;\n}\n/**\n * Insert an entry into `parent`.\n *\n * @param {SearchEntry} entry\n * @param {List | ListItem} parent\n * @param {ContentsOptions} settings\n */ function insert(entry, parent, settings) {\n    let index = -1;\n    const tail = parent.children[parent.children.length - 1];\n    if (parent.type === \"list\") {\n        if (entry.depth === 1) {\n            parent.children.push({\n                type: \"listItem\",\n                spread: false,\n                children: [\n                    {\n                        type: \"paragraph\",\n                        children: [\n                            {\n                                type: \"link\",\n                                title: null,\n                                url: \"#\" + (settings.prefix || \"\") + entry.id,\n                                children: all(entry.children)\n                            }\n                        ]\n                    }\n                ]\n            });\n        } else if (parent.children.length > 0) {\n            const tail = parent.children[parent.children.length - 1];\n            insert(entry, tail, settings);\n        } else {\n            /** @type {ListItem} */ const item = {\n                type: \"listItem\",\n                spread: false,\n                children: []\n            };\n            parent.children.push(item);\n            insert(entry, item, settings);\n        }\n    } else if (tail && tail.type === \"list\") {\n        entry.depth--;\n        insert(entry, tail, settings);\n    } else {\n        /** @type {List} */ const item = {\n            type: \"list\",\n            ordered: settings.ordered,\n            spread: false,\n            children: []\n        };\n        parent.children.push(item);\n        entry.depth--;\n        insert(entry, item, settings);\n    }\n    if (parent.type === \"list\" && !settings.tight) {\n        parent.spread = false;\n        while(++index < parent.children.length){\n            if (parent.children[index].children.length > 1) {\n                parent.spread = true;\n                break;\n            }\n        }\n    } else {\n        parent.spread = !settings.tight;\n    }\n}\n/**\n * @param {Array<PhrasingContent>} [nodes]\n * @returns {Array<StaticPhrasingContent>}\n */ function all(nodes) {\n    /** @type {Array<StaticPhrasingContent>} */ let result = [];\n    let index = -1;\n    if (nodes) {\n        while(++index < nodes.length){\n            result = result.concat(one(nodes[index]));\n        }\n    }\n    return result;\n}\n/**\n * @param {PhrasingContent} node\n * @returns {StaticPhrasingContent | Array<StaticPhrasingContent>}\n */ function one(node) {\n    if (node.type === \"footnoteReference\") {\n        return [];\n    }\n    if (node.type === \"link\" || node.type === \"linkReference\" || node.type === \"footnote\") {\n        return all(node.children);\n    }\n    if (\"children\" in node) {\n        const { children, position, ...copy } = node;\n        return Object.assign(extend__WEBPACK_IMPORTED_MODULE_0___default()(true, {}, copy), {\n            children: all(node.children)\n        });\n    }\n    const { position, ...copy } = node;\n    return extend__WEBPACK_IMPORTED_MODULE_0___default()(true, {}, copy);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-toc/lib/contents.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-toc/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mdast-util-toc/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toc: () => (/* binding */ toc)\n/* harmony export */ });\n/* harmony import */ var _search_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./search.js */ \"(rsc)/./node_modules/mdast-util-toc/lib/search.js\");\n/* harmony import */ var _contents_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contents.js */ \"(rsc)/./node_modules/mdast-util-toc/lib/contents.js\");\n/* harmony import */ var _to_expression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./to-expression.js */ \"(rsc)/./node_modules/mdast-util-toc/lib/to-expression.js\");\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').List} List\n * @typedef {import('./search.js').SearchOptions} SearchOptions\n * @typedef {import('./contents.js').ContentsOptions} ContentsOptions\n */ /**\n * @typedef {Root | Content} Node\n * @typedef {SearchOptions & ContentsOptions & ExtraOptions} Options\n *\n * @typedef ExtraOptions\n *   Extra configuration fields.\n * @property {string | null | undefined} [heading]\n *   Heading to look for, wrapped in `new RegExp('^(' + value + ')$', 'i')`.\n *\n * @typedef Result\n *   Results.\n * @property {number | null} index\n *   Index of the node right after the table of contents heading, `-1` if no\n *   heading was found, `null` if no `heading` was given.\n * @property {number | null} endIndex\n *   Index of the first node after `heading` that is not part of its section,\n *   `-1` if no heading was found, `null` if no `heading` was given, same as\n *   `index` if there are no nodes between `heading` and the first heading in\n *   the table of contents.\n * @property {List | null} map\n *   List representing the generated table of contents, `null` if no table of\n *   contents could be created, either because no heading was found or because\n *   no following headings were found.\n */ \n\n\n/**\n * Generate a table of contents from `tree`.\n *\n * Looks for the first heading matching `options.heading` (case insensitive) and\n * returns a table of contents (a list) for all following headings.\n * If no `heading` is specified, creates a table of contents for all headings in\n * `tree`.\n * `tree` is not changed.\n *\n * Links in the list to headings are based on GitHub’s style.\n * Only top-level headings (those not in blockquotes or lists), are used.\n * This default behavior can be changed by passing `options.parents`.\n *\n * @param {Node} tree\n *   Tree to search and generate from.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Result}\n *   Results.\n */ function toc(tree, options) {\n    const settings = options || {};\n    const heading = settings.heading ? (0,_to_expression_js__WEBPACK_IMPORTED_MODULE_0__.toExpression)(settings.heading) : undefined;\n    const result = (0,_search_js__WEBPACK_IMPORTED_MODULE_1__.search)(tree, heading, settings);\n    return {\n        index: heading ? result.index : null,\n        endIndex: heading ? result.endIndex : null,\n        map: result.map.length > 0 ? (0,_contents_js__WEBPACK_IMPORTED_MODULE_2__.contents)(result.map, settings) : null\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10b2MvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F1QkMsR0FFaUM7QUFDSTtBQUNTO0FBRS9DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUJDLEdBQ00sU0FBU0csSUFBSUMsSUFBSSxFQUFFQyxPQUFPO0lBQy9CLE1BQU1DLFdBQVdELFdBQVcsQ0FBQztJQUM3QixNQUFNRSxVQUFVRCxTQUFTQyxPQUFPLEdBQUdMLCtEQUFZQSxDQUFDSSxTQUFTQyxPQUFPLElBQUlDO0lBQ3BFLE1BQU1DLFNBQVNULGtEQUFNQSxDQUFDSSxNQUFNRyxTQUFTRDtJQUVyQyxPQUFPO1FBQ0xJLE9BQU9ILFVBQVVFLE9BQU9DLEtBQUssR0FBRztRQUNoQ0MsVUFBVUosVUFBVUUsT0FBT0UsUUFBUSxHQUFHO1FBQ3RDQyxLQUFLSCxPQUFPRyxHQUFHLENBQUNDLE1BQU0sR0FBRyxJQUFJWixzREFBUUEsQ0FBQ1EsT0FBT0csR0FBRyxFQUFFTixZQUFZO0lBQ2hFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXhvbm9teS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvYy9saWIvaW5kZXguanM/YjUwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Db250ZW50fSBDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpc3R9IExpc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2VhcmNoLmpzJykuU2VhcmNoT3B0aW9uc30gU2VhcmNoT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9jb250ZW50cy5qcycpLkNvbnRlbnRzT3B0aW9uc30gQ29udGVudHNPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7Um9vdCB8IENvbnRlbnR9IE5vZGVcbiAqIEB0eXBlZGVmIHtTZWFyY2hPcHRpb25zICYgQ29udGVudHNPcHRpb25zICYgRXh0cmFPcHRpb25zfSBPcHRpb25zXG4gKlxuICogQHR5cGVkZWYgRXh0cmFPcHRpb25zXG4gKiAgIEV4dHJhIGNvbmZpZ3VyYXRpb24gZmllbGRzLlxuICogQHByb3BlcnR5IHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbaGVhZGluZ11cbiAqICAgSGVhZGluZyB0byBsb29rIGZvciwgd3JhcHBlZCBpbiBgbmV3IFJlZ0V4cCgnXignICsgdmFsdWUgKyAnKSQnLCAnaScpYC5cbiAqXG4gKiBAdHlwZWRlZiBSZXN1bHRcbiAqICAgUmVzdWx0cy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbH0gaW5kZXhcbiAqICAgSW5kZXggb2YgdGhlIG5vZGUgcmlnaHQgYWZ0ZXIgdGhlIHRhYmxlIG9mIGNvbnRlbnRzIGhlYWRpbmcsIGAtMWAgaWYgbm9cbiAqICAgaGVhZGluZyB3YXMgZm91bmQsIGBudWxsYCBpZiBubyBgaGVhZGluZ2Agd2FzIGdpdmVuLlxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsfSBlbmRJbmRleFxuICogICBJbmRleCBvZiB0aGUgZmlyc3Qgbm9kZSBhZnRlciBgaGVhZGluZ2AgdGhhdCBpcyBub3QgcGFydCBvZiBpdHMgc2VjdGlvbixcbiAqICAgYC0xYCBpZiBubyBoZWFkaW5nIHdhcyBmb3VuZCwgYG51bGxgIGlmIG5vIGBoZWFkaW5nYCB3YXMgZ2l2ZW4sIHNhbWUgYXNcbiAqICAgYGluZGV4YCBpZiB0aGVyZSBhcmUgbm8gbm9kZXMgYmV0d2VlbiBgaGVhZGluZ2AgYW5kIHRoZSBmaXJzdCBoZWFkaW5nIGluXG4gKiAgIHRoZSB0YWJsZSBvZiBjb250ZW50cy5cbiAqIEBwcm9wZXJ0eSB7TGlzdCB8IG51bGx9IG1hcFxuICogICBMaXN0IHJlcHJlc2VudGluZyB0aGUgZ2VuZXJhdGVkIHRhYmxlIG9mIGNvbnRlbnRzLCBgbnVsbGAgaWYgbm8gdGFibGUgb2ZcbiAqICAgY29udGVudHMgY291bGQgYmUgY3JlYXRlZCwgZWl0aGVyIGJlY2F1c2Ugbm8gaGVhZGluZyB3YXMgZm91bmQgb3IgYmVjYXVzZVxuICogICBubyBmb2xsb3dpbmcgaGVhZGluZ3Mgd2VyZSBmb3VuZC5cbiAqL1xuXG5pbXBvcnQge3NlYXJjaH0gZnJvbSAnLi9zZWFyY2guanMnXG5pbXBvcnQge2NvbnRlbnRzfSBmcm9tICcuL2NvbnRlbnRzLmpzJ1xuaW1wb3J0IHt0b0V4cHJlc3Npb259IGZyb20gJy4vdG8tZXhwcmVzc2lvbi5qcydcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHRhYmxlIG9mIGNvbnRlbnRzIGZyb20gYHRyZWVgLlxuICpcbiAqIExvb2tzIGZvciB0aGUgZmlyc3QgaGVhZGluZyBtYXRjaGluZyBgb3B0aW9ucy5oZWFkaW5nYCAoY2FzZSBpbnNlbnNpdGl2ZSkgYW5kXG4gKiByZXR1cm5zIGEgdGFibGUgb2YgY29udGVudHMgKGEgbGlzdCkgZm9yIGFsbCBmb2xsb3dpbmcgaGVhZGluZ3MuXG4gKiBJZiBubyBgaGVhZGluZ2AgaXMgc3BlY2lmaWVkLCBjcmVhdGVzIGEgdGFibGUgb2YgY29udGVudHMgZm9yIGFsbCBoZWFkaW5ncyBpblxuICogYHRyZWVgLlxuICogYHRyZWVgIGlzIG5vdCBjaGFuZ2VkLlxuICpcbiAqIExpbmtzIGluIHRoZSBsaXN0IHRvIGhlYWRpbmdzIGFyZSBiYXNlZCBvbiBHaXRIdWLigJlzIHN0eWxlLlxuICogT25seSB0b3AtbGV2ZWwgaGVhZGluZ3MgKHRob3NlIG5vdCBpbiBibG9ja3F1b3RlcyBvciBsaXN0cyksIGFyZSB1c2VkLlxuICogVGhpcyBkZWZhdWx0IGJlaGF2aW9yIGNhbiBiZSBjaGFuZ2VkIGJ5IHBhc3NpbmcgYG9wdGlvbnMucGFyZW50c2AuXG4gKlxuICogQHBhcmFtIHtOb2RlfSB0cmVlXG4gKiAgIFRyZWUgdG8gc2VhcmNoIGFuZCBnZW5lcmF0ZSBmcm9tLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyB7UmVzdWx0fVxuICogICBSZXN1bHRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9jKHRyZWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG4gIGNvbnN0IGhlYWRpbmcgPSBzZXR0aW5ncy5oZWFkaW5nID8gdG9FeHByZXNzaW9uKHNldHRpbmdzLmhlYWRpbmcpIDogdW5kZWZpbmVkXG4gIGNvbnN0IHJlc3VsdCA9IHNlYXJjaCh0cmVlLCBoZWFkaW5nLCBzZXR0aW5ncylcblxuICByZXR1cm4ge1xuICAgIGluZGV4OiBoZWFkaW5nID8gcmVzdWx0LmluZGV4IDogbnVsbCxcbiAgICBlbmRJbmRleDogaGVhZGluZyA/IHJlc3VsdC5lbmRJbmRleCA6IG51bGwsXG4gICAgbWFwOiByZXN1bHQubWFwLmxlbmd0aCA+IDAgPyBjb250ZW50cyhyZXN1bHQubWFwLCBzZXR0aW5ncykgOiBudWxsXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJzZWFyY2giLCJjb250ZW50cyIsInRvRXhwcmVzc2lvbiIsInRvYyIsInRyZWUiLCJvcHRpb25zIiwic2V0dGluZ3MiLCJoZWFkaW5nIiwidW5kZWZpbmVkIiwicmVzdWx0IiwiaW5kZXgiLCJlbmRJbmRleCIsIm1hcCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-toc/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-toc/lib/search.js":
/*!***************************************************!*\
  !*** ./node_modules/mdast-util-toc/lib/search.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   search: () => (/* binding */ search)\n/* harmony export */ });\n/* harmony import */ var github_slugger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! github-slugger */ \"(rsc)/./node_modules/github-slugger/index.js\");\n/* harmony import */ var mdast_util_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mdast-util-to-string */ \"(rsc)/./node_modules/mdast-util-to-string/lib/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var unist_util_is__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-is */ \"(rsc)/./node_modules/unist-util-is/lib/index.js\");\n/* harmony import */ var _to_expression_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./to-expression.js */ \"(rsc)/./node_modules/mdast-util-toc/lib/to-expression.js\");\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').Test} Test\n */ /**\n * @typedef {Root | Content} Node\n * @typedef {Heading['depth']} Rank\n *\n */ /**\n * @typedef SearchOptions\n *   Search configuration.\n * @property {Rank | null | undefined} [maxDepth=6]\n *   Maximum heading depth to include in the table of contents.\n *\n *   This is inclusive: when set to `3`, level three headings are included\n *   (those with three hashes, `###`).\n * @property {string | null | undefined} [skip]\n *   Headings to skip, wrapped in `new RegExp('^(' + value + ')$', 'i')`.\n *\n *   Any heading matching this expression will not be present in the table of\n *   contents.\n * @property {Test} [parents]\n *   Allow headings to be children of certain node types (default: the to `toc`\n *   given `tree`, to only allow top-level headings).\n *\n *   Internally, uses `unist-util-is` to check, so `parents` can be any\n *   `is`-compatible test.\n *\n * @typedef SearchEntry\n *   Entry.\n * @property {string} id\n *   ID of entry.\n * @property {Array<PhrasingContent>} children\n *   Contents of entry.\n * @property {Rank} depth\n *   Rank of entry.\n *\n * @typedef SearchResult\n *   Results.\n * @property {number} index\n *   Where the contents section starts, if looking for a heading.\n * @property {number} endIndex\n *   Where the contents section ends, if looking for a heading.\n * @property {Array<SearchEntry>} map\n *   List of entries.\n */ \n\n\n\n\nconst slugs = new github_slugger__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n/**\n * Search a node for a toc.\n *\n * @param {Node} root\n * @param {RegExp | undefined} expression\n * @param {SearchOptions} settings\n * @returns {SearchResult}\n */ function search(root, expression, settings) {\n    const skip = settings.skip ? (0,_to_expression_js__WEBPACK_IMPORTED_MODULE_1__.toExpression)(settings.skip) : undefined;\n    const parents = (0,unist_util_is__WEBPACK_IMPORTED_MODULE_2__.convert)(settings.parents || ((d)=>d === root));\n    /** @type {Array<SearchEntry>} */ const map = [];\n    /** @type {number | undefined} */ let index;\n    /** @type {number | undefined} */ let endIndex;\n    /** @type {Heading | undefined} */ let opening;\n    slugs.reset();\n    // Visit all headings in `root`.  We `slug` all headings (to account for\n    // duplicates), but only create a TOC from top-level headings (by default).\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_3__.visit)(root, \"heading\", (node, position, parent)=>{\n        const value = (0,mdast_util_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(node, {\n            includeImageAlt: false\n        });\n        /** @type {string} */ // @ts-expect-error `hProperties` from <https://github.com/syntax-tree/mdast-util-to-hast>\n        const id = node.data && node.data.hProperties && node.data.hProperties.id;\n        const slug = slugs.slug(id || value);\n        if (!parents(parent)) {\n            return;\n        }\n        // Our opening heading.\n        if (position !== null && expression && !index && expression.test(value)) {\n            index = position + 1;\n            opening = node;\n            return;\n        }\n        // Our closing heading.\n        if (position !== null && opening && !endIndex && node.depth <= opening.depth) {\n            endIndex = position;\n        }\n        // A heading after the closing (if we were looking for one).\n        if ((endIndex || !expression) && (!settings.maxDepth || node.depth <= settings.maxDepth) && (!skip || !skip.test(value))) {\n            map.push({\n                depth: node.depth,\n                children: node.children,\n                id: slug\n            });\n        }\n    });\n    return {\n        index: index === undefined ? -1 : index,\n        // <sindresorhus/eslint-plugin-unicorn#980>\n        // @ts-expect-error Looks like a parent.\n        endIndex: index === undefined ? -1 : endIndex || root.children.length,\n        map\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10b2MvbGliL3NlYXJjaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FFRDs7OztDQUlDLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQ0MsR0FFbUM7QUFDUztBQUNQO0FBQ0Q7QUFDVTtBQUUvQyxNQUFNSyxRQUFRLElBQUlMLHNEQUFPQTtBQUV6Qjs7Ozs7OztDQU9DLEdBQ00sU0FBU00sT0FBT0MsSUFBSSxFQUFFQyxVQUFVLEVBQUVDLFFBQVE7SUFDL0MsTUFBTUMsT0FBT0QsU0FBU0MsSUFBSSxHQUFHTiwrREFBWUEsQ0FBQ0ssU0FBU0MsSUFBSSxJQUFJQztJQUMzRCxNQUFNQyxVQUFVVCxzREFBT0EsQ0FBQ00sU0FBU0csT0FBTyxJQUFLLEVBQUNDLElBQU1BLE1BQU1OLElBQUc7SUFDN0QsK0JBQStCLEdBQy9CLE1BQU1PLE1BQU0sRUFBRTtJQUNkLCtCQUErQixHQUMvQixJQUFJQztJQUNKLCtCQUErQixHQUMvQixJQUFJQztJQUNKLGdDQUFnQyxHQUNoQyxJQUFJQztJQUVKWixNQUFNYSxLQUFLO0lBRVgsd0VBQXdFO0lBQ3hFLDJFQUEyRTtJQUMzRWhCLHVEQUFLQSxDQUFDSyxNQUFNLFdBQVcsQ0FBQ1ksTUFBTUMsVUFBVUM7UUFDdEMsTUFBTUMsUUFBUXJCLDhEQUFRQSxDQUFDa0IsTUFBTTtZQUFDSSxpQkFBaUI7UUFBSztRQUNwRCxtQkFBbUIsR0FDbkIsMEZBQTBGO1FBQzFGLE1BQU1DLEtBQUtMLEtBQUtNLElBQUksSUFBSU4sS0FBS00sSUFBSSxDQUFDQyxXQUFXLElBQUlQLEtBQUtNLElBQUksQ0FBQ0MsV0FBVyxDQUFDRixFQUFFO1FBQ3pFLE1BQU1HLE9BQU90QixNQUFNc0IsSUFBSSxDQUFDSCxNQUFNRjtRQUU5QixJQUFJLENBQUNWLFFBQVFTLFNBQVM7WUFDcEI7UUFDRjtRQUVBLHVCQUF1QjtRQUN2QixJQUFJRCxhQUFhLFFBQVFaLGNBQWMsQ0FBQ08sU0FBU1AsV0FBV29CLElBQUksQ0FBQ04sUUFBUTtZQUN2RVAsUUFBUUssV0FBVztZQUNuQkgsVUFBVUU7WUFDVjtRQUNGO1FBRUEsdUJBQXVCO1FBQ3ZCLElBQ0VDLGFBQWEsUUFDYkgsV0FDQSxDQUFDRCxZQUNERyxLQUFLVSxLQUFLLElBQUlaLFFBQVFZLEtBQUssRUFDM0I7WUFDQWIsV0FBV0k7UUFDYjtRQUVBLDREQUE0RDtRQUM1RCxJQUNFLENBQUNKLFlBQVksQ0FBQ1IsVUFBUyxLQUN0QixFQUFDQyxTQUFTcUIsUUFBUSxJQUFJWCxLQUFLVSxLQUFLLElBQUlwQixTQUFTcUIsUUFBUSxLQUNyRCxFQUFDcEIsUUFBUSxDQUFDQSxLQUFLa0IsSUFBSSxDQUFDTixNQUFLLEdBQzFCO1lBQ0FSLElBQUlpQixJQUFJLENBQUM7Z0JBQUNGLE9BQU9WLEtBQUtVLEtBQUs7Z0JBQUVHLFVBQVViLEtBQUthLFFBQVE7Z0JBQUVSLElBQUlHO1lBQUk7UUFDaEU7SUFDRjtJQUVBLE9BQU87UUFDTFosT0FBT0EsVUFBVUosWUFBWSxDQUFDLElBQUlJO1FBQ2xDLDJDQUEyQztRQUMzQyx3Q0FBd0M7UUFDeENDLFVBQVVELFVBQVVKLFlBQVksQ0FBQyxJQUFJSyxZQUFZVCxLQUFLeUIsUUFBUSxDQUFDQyxNQUFNO1FBQ3JFbkI7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF4b25vbXkvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10b2MvbGliL3NlYXJjaC5qcz9hNWRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvbnRlbnR9IENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuSGVhZGluZ30gSGVhZGluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5QaHJhc2luZ0NvbnRlbnR9IFBocmFzaW5nQ29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QtdXRpbC1pcycpLlRlc3R9IFRlc3RcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtSb290IHwgQ29udGVudH0gTm9kZVxuICogQHR5cGVkZWYge0hlYWRpbmdbJ2RlcHRoJ119IFJhbmtcbiAqXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBTZWFyY2hPcHRpb25zXG4gKiAgIFNlYXJjaCBjb25maWd1cmF0aW9uLlxuICogQHByb3BlcnR5IHtSYW5rIHwgbnVsbCB8IHVuZGVmaW5lZH0gW21heERlcHRoPTZdXG4gKiAgIE1heGltdW0gaGVhZGluZyBkZXB0aCB0byBpbmNsdWRlIGluIHRoZSB0YWJsZSBvZiBjb250ZW50cy5cbiAqXG4gKiAgIFRoaXMgaXMgaW5jbHVzaXZlOiB3aGVuIHNldCB0byBgM2AsIGxldmVsIHRocmVlIGhlYWRpbmdzIGFyZSBpbmNsdWRlZFxuICogICAodGhvc2Ugd2l0aCB0aHJlZSBoYXNoZXMsIGAjIyNgKS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3NraXBdXG4gKiAgIEhlYWRpbmdzIHRvIHNraXAsIHdyYXBwZWQgaW4gYG5ldyBSZWdFeHAoJ14oJyArIHZhbHVlICsgJykkJywgJ2knKWAuXG4gKlxuICogICBBbnkgaGVhZGluZyBtYXRjaGluZyB0aGlzIGV4cHJlc3Npb24gd2lsbCBub3QgYmUgcHJlc2VudCBpbiB0aGUgdGFibGUgb2ZcbiAqICAgY29udGVudHMuXG4gKiBAcHJvcGVydHkge1Rlc3R9IFtwYXJlbnRzXVxuICogICBBbGxvdyBoZWFkaW5ncyB0byBiZSBjaGlsZHJlbiBvZiBjZXJ0YWluIG5vZGUgdHlwZXMgKGRlZmF1bHQ6IHRoZSB0byBgdG9jYFxuICogICBnaXZlbiBgdHJlZWAsIHRvIG9ubHkgYWxsb3cgdG9wLWxldmVsIGhlYWRpbmdzKS5cbiAqXG4gKiAgIEludGVybmFsbHksIHVzZXMgYHVuaXN0LXV0aWwtaXNgIHRvIGNoZWNrLCBzbyBgcGFyZW50c2AgY2FuIGJlIGFueVxuICogICBgaXNgLWNvbXBhdGlibGUgdGVzdC5cbiAqXG4gKiBAdHlwZWRlZiBTZWFyY2hFbnRyeVxuICogICBFbnRyeS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZFxuICogICBJRCBvZiBlbnRyeS5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8UGhyYXNpbmdDb250ZW50Pn0gY2hpbGRyZW5cbiAqICAgQ29udGVudHMgb2YgZW50cnkuXG4gKiBAcHJvcGVydHkge1Jhbmt9IGRlcHRoXG4gKiAgIFJhbmsgb2YgZW50cnkuXG4gKlxuICogQHR5cGVkZWYgU2VhcmNoUmVzdWx0XG4gKiAgIFJlc3VsdHMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW5kZXhcbiAqICAgV2hlcmUgdGhlIGNvbnRlbnRzIHNlY3Rpb24gc3RhcnRzLCBpZiBsb29raW5nIGZvciBhIGhlYWRpbmcuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZW5kSW5kZXhcbiAqICAgV2hlcmUgdGhlIGNvbnRlbnRzIHNlY3Rpb24gZW5kcywgaWYgbG9va2luZyBmb3IgYSBoZWFkaW5nLlxuICogQHByb3BlcnR5IHtBcnJheTxTZWFyY2hFbnRyeT59IG1hcFxuICogICBMaXN0IG9mIGVudHJpZXMuXG4gKi9cblxuaW1wb3J0IFNsdWdnZXIgZnJvbSAnZ2l0aHViLXNsdWdnZXInXG5pbXBvcnQge3RvU3RyaW5nfSBmcm9tICdtZGFzdC11dGlsLXRvLXN0cmluZydcbmltcG9ydCB7dmlzaXR9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnXG5pbXBvcnQge2NvbnZlcnR9IGZyb20gJ3VuaXN0LXV0aWwtaXMnXG5pbXBvcnQge3RvRXhwcmVzc2lvbn0gZnJvbSAnLi90by1leHByZXNzaW9uLmpzJ1xuXG5jb25zdCBzbHVncyA9IG5ldyBTbHVnZ2VyKClcblxuLyoqXG4gKiBTZWFyY2ggYSBub2RlIGZvciBhIHRvYy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IHJvb3RcbiAqIEBwYXJhbSB7UmVnRXhwIHwgdW5kZWZpbmVkfSBleHByZXNzaW9uXG4gKiBAcGFyYW0ge1NlYXJjaE9wdGlvbnN9IHNldHRpbmdzXG4gKiBAcmV0dXJucyB7U2VhcmNoUmVzdWx0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoKHJvb3QsIGV4cHJlc3Npb24sIHNldHRpbmdzKSB7XG4gIGNvbnN0IHNraXAgPSBzZXR0aW5ncy5za2lwID8gdG9FeHByZXNzaW9uKHNldHRpbmdzLnNraXApIDogdW5kZWZpbmVkXG4gIGNvbnN0IHBhcmVudHMgPSBjb252ZXJ0KHNldHRpbmdzLnBhcmVudHMgfHwgKChkKSA9PiBkID09PSByb290KSlcbiAgLyoqIEB0eXBlIHtBcnJheTxTZWFyY2hFbnRyeT59ICovXG4gIGNvbnN0IG1hcCA9IFtdXG4gIC8qKiBAdHlwZSB7bnVtYmVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgaW5kZXhcbiAgLyoqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBlbmRJbmRleFxuICAvKiogQHR5cGUge0hlYWRpbmcgfCB1bmRlZmluZWR9ICovXG4gIGxldCBvcGVuaW5nXG5cbiAgc2x1Z3MucmVzZXQoKVxuXG4gIC8vIFZpc2l0IGFsbCBoZWFkaW5ncyBpbiBgcm9vdGAuICBXZSBgc2x1Z2AgYWxsIGhlYWRpbmdzICh0byBhY2NvdW50IGZvclxuICAvLyBkdXBsaWNhdGVzKSwgYnV0IG9ubHkgY3JlYXRlIGEgVE9DIGZyb20gdG9wLWxldmVsIGhlYWRpbmdzIChieSBkZWZhdWx0KS5cbiAgdmlzaXQocm9vdCwgJ2hlYWRpbmcnLCAobm9kZSwgcG9zaXRpb24sIHBhcmVudCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gdG9TdHJpbmcobm9kZSwge2luY2x1ZGVJbWFnZUFsdDogZmFsc2V9KVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGhQcm9wZXJ0aWVzYCBmcm9tIDxodHRwczovL2dpdGh1Yi5jb20vc3ludGF4LXRyZWUvbWRhc3QtdXRpbC10by1oYXN0PlxuICAgIGNvbnN0IGlkID0gbm9kZS5kYXRhICYmIG5vZGUuZGF0YS5oUHJvcGVydGllcyAmJiBub2RlLmRhdGEuaFByb3BlcnRpZXMuaWRcbiAgICBjb25zdCBzbHVnID0gc2x1Z3Muc2x1ZyhpZCB8fCB2YWx1ZSlcblxuICAgIGlmICghcGFyZW50cyhwYXJlbnQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBPdXIgb3BlbmluZyBoZWFkaW5nLlxuICAgIGlmIChwb3NpdGlvbiAhPT0gbnVsbCAmJiBleHByZXNzaW9uICYmICFpbmRleCAmJiBleHByZXNzaW9uLnRlc3QodmFsdWUpKSB7XG4gICAgICBpbmRleCA9IHBvc2l0aW9uICsgMVxuICAgICAgb3BlbmluZyA9IG5vZGVcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIE91ciBjbG9zaW5nIGhlYWRpbmcuXG4gICAgaWYgKFxuICAgICAgcG9zaXRpb24gIT09IG51bGwgJiZcbiAgICAgIG9wZW5pbmcgJiZcbiAgICAgICFlbmRJbmRleCAmJlxuICAgICAgbm9kZS5kZXB0aCA8PSBvcGVuaW5nLmRlcHRoXG4gICAgKSB7XG4gICAgICBlbmRJbmRleCA9IHBvc2l0aW9uXG4gICAgfVxuXG4gICAgLy8gQSBoZWFkaW5nIGFmdGVyIHRoZSBjbG9zaW5nIChpZiB3ZSB3ZXJlIGxvb2tpbmcgZm9yIG9uZSkuXG4gICAgaWYgKFxuICAgICAgKGVuZEluZGV4IHx8ICFleHByZXNzaW9uKSAmJlxuICAgICAgKCFzZXR0aW5ncy5tYXhEZXB0aCB8fCBub2RlLmRlcHRoIDw9IHNldHRpbmdzLm1heERlcHRoKSAmJlxuICAgICAgKCFza2lwIHx8ICFza2lwLnRlc3QodmFsdWUpKVxuICAgICkge1xuICAgICAgbWFwLnB1c2goe2RlcHRoOiBub2RlLmRlcHRoLCBjaGlsZHJlbjogbm9kZS5jaGlsZHJlbiwgaWQ6IHNsdWd9KVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIGluZGV4OiBpbmRleCA9PT0gdW5kZWZpbmVkID8gLTEgOiBpbmRleCxcbiAgICAvLyA8c2luZHJlc29yaHVzL2VzbGludC1wbHVnaW4tdW5pY29ybiM5ODA+XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBMb29rcyBsaWtlIGEgcGFyZW50LlxuICAgIGVuZEluZGV4OiBpbmRleCA9PT0gdW5kZWZpbmVkID8gLTEgOiBlbmRJbmRleCB8fCByb290LmNoaWxkcmVuLmxlbmd0aCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSB1bmljb3JuL2V4cGxpY2l0LWxlbmd0aC1jaGVja1xuICAgIG1hcFxuICB9XG59XG4iXSwibmFtZXMiOlsiU2x1Z2dlciIsInRvU3RyaW5nIiwidmlzaXQiLCJjb252ZXJ0IiwidG9FeHByZXNzaW9uIiwic2x1Z3MiLCJzZWFyY2giLCJyb290IiwiZXhwcmVzc2lvbiIsInNldHRpbmdzIiwic2tpcCIsInVuZGVmaW5lZCIsInBhcmVudHMiLCJkIiwibWFwIiwiaW5kZXgiLCJlbmRJbmRleCIsIm9wZW5pbmciLCJyZXNldCIsIm5vZGUiLCJwb3NpdGlvbiIsInBhcmVudCIsInZhbHVlIiwiaW5jbHVkZUltYWdlQWx0IiwiaWQiLCJkYXRhIiwiaFByb3BlcnRpZXMiLCJzbHVnIiwidGVzdCIsImRlcHRoIiwibWF4RGVwdGgiLCJwdXNoIiwiY2hpbGRyZW4iLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-toc/lib/search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-toc/lib/to-expression.js":
/*!**********************************************************!*\
  !*** ./node_modules/mdast-util-toc/lib/to-expression.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toExpression: () => (/* binding */ toExpression)\n/* harmony export */ });\n/**\n * Transform a string into an applicable expression.\n *\n * @param {string} value\n * @returns {RegExp}\n */ function toExpression(value) {\n    return new RegExp(\"^(\" + value + \")$\", \"i\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10b2MvbGliL3RvLWV4cHJlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztDQUtDLEdBQ00sU0FBU0EsYUFBYUMsS0FBSztJQUNoQyxPQUFPLElBQUlDLE9BQU8sT0FBT0QsUUFBUSxNQUFNO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF4b25vbXkvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10b2MvbGliL3RvLWV4cHJlc3Npb24uanM/YWIzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRyYW5zZm9ybSBhIHN0cmluZyBpbnRvIGFuIGFwcGxpY2FibGUgZXhwcmVzc2lvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtSZWdFeHB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0V4cHJlc3Npb24odmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14oJyArIHZhbHVlICsgJykkJywgJ2knKVxufVxuIl0sIm5hbWVzIjpbInRvRXhwcmVzc2lvbiIsInZhbHVlIiwiUmVnRXhwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-toc/lib/to-expression.js\n");

/***/ })

};
;